{
  "_args": [
    [
      "realistic-structured-clone@https://registry.npmjs.org/realistic-structured-clone/-/realistic-structured-clone-0.0.2.tgz",
      "/Users/Thomas/Documents/Kinvey/Development/SDKs/JavaScript/Core/SDK/node_modules/fake-indexeddb"
    ]
  ],
  "_from": "realistic-structured-clone@0.0.2",
  "_id": "realistic-structured-clone@0.0.2",
  "_inCache": true,
  "_location": "/fake-indexeddb/realistic-structured-clone",
  "_phantomChildren": {},
  "_requested": {
    "name": "realistic-structured-clone",
    "raw": "realistic-structured-clone@https://registry.npmjs.org/realistic-structured-clone/-/realistic-structured-clone-0.0.2.tgz",
    "rawSpec": "https://registry.npmjs.org/realistic-structured-clone/-/realistic-structured-clone-0.0.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/realistic-structured-clone/-/realistic-structured-clone-0.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/fake-indexeddb"
  ],
  "_resolved": "https://registry.npmjs.org/realistic-structured-clone/-/realistic-structured-clone-0.0.2.tgz",
  "_shasum": "c4ac164924bf4aaeba9eccda058ceb125853c473",
  "_shrinkwrap": null,
  "_spec": "realistic-structured-clone@https://registry.npmjs.org/realistic-structured-clone/-/realistic-structured-clone-0.0.2.tgz",
  "_where": "/Users/Thomas/Documents/Kinvey/Development/SDKs/JavaScript/Core/SDK/node_modules/fake-indexeddb",
  "author": {
    "email": "jdscheff@gmail.com",
    "name": "Jeremy Scheff",
    "url": "http://dumbmatter.com/"
  },
  "bugs": {
    "url": "https://github.com/dumbmatter/realistic-structured-clone/issues"
  },
  "dependencies": {
    "lodash.isplainobject": "^3.0.2"
  },
  "description": "A pure JS implementation of the structured clone algorithm (or at least something pretty close to that)",
  "devDependencies": {
    "eslint": "^0.20.0",
    "mocha": "^2.2.4"
  },
  "homepage": "https://github.com/dumbmatter/realistic-structured-clone",
  "keywords": [
    "structured",
    "clone",
    "structured-clone"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "realistic-structured-clone",
  "optionalDependencies": {},
  "readme": "# Realistic Structured Clone [![Build Status](https://travis-ci.org/dumbmatter/realistic-structured-clone.svg?branch=master)](https://travis-ci.org/dumbmatter/realistic-structured-clone)\n\nThis is a pure JS implementation of the [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm) (or at least something pretty close to that).\n\nWhy do you want this? Well, you probably don't. If your goal is to just clone a JS object, you're better off with [lodash's _.cloneDeep](https://lodash.com/docs#cloneDeep) or [the popular `clone` module on npm](https://www.npmjs.com/package/clone).\n\nLet's try again... why do you want this? If you are making an implementation of an API that explicitly uses the structured clone algorithm (such as [IndexedDB](https://github.com/dumbmatter/fakeIndexedDB)), then you want something that handles quirks and edge cases exactly like the structured clone algorithm. That's what `realistic-structured-clone` is for. It's not totally there (see below) but it's a decent start.\n\n## Use\n\n[Install through npm:](https://www.npmjs.com/package/realistic-structured-clone)\n\n    $ npm install realistic-structured-clone\n\nThen use it:\n\n    // First load the module\n    // (Use Browserify or something if you're targeting the web)\n    var structuredClone = require('realistic-structured-clone');\n\n    // Clone a variable (will throw a DataCloneError for invalid input)\n    var clonedX = structuredClone(x);\n\n## Alternatives\n\nIf you look around, you'll notice various modules calling themselves implementations of the structured clone algorithm, such as [the `structured-clone` package on npm](https://www.npmjs.com/package/structured-clone). But that package, like all the others I've seen, doesn't actually seem to be an attempt at implementing the structured clone algorithm. It's just some arbitrary type of clone. As I wrote above, this distinction only matters if you really care about the nuances of the structured clone algorithm, which you probably don't.\n\nIf you're working in the browser, you can do [something like this](https://twitter.com/TedMielczarek/status/591315580277391360) to do a real structured clone:\n\n    function clone(x) {\n        return new Promise(function (resolve, reject) {\n            window.addEventListener('message', function(e) {\n                resolve(e.data);\n            });\n            window.postMessage(x, \"*\");\n        });\n    }\n    var x = {a:[1,2,3], b:{c:1}};\n    clone(x).then(function(cloned) {\n        console.log(\"x: %s\", JSON.stringify(x));\n        console.log(\"cloned: %s\", JSON.stringify(cloned));\n        console.log(\"x == cloned %s\", x == cloned);\n        console.log(\"x === cloned %s\", x === cloned);\n    });\n\nHowever, that won't help you in Node.js/io.js. It's also asynchronous, which could be a problem. `realistic-structured-clone` is synchronous and works everywhere.\n\n## Current State\n\n[The spec](http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#internal-structured-cloning-algorithm) says it's supposed to handle Blob, FileList, ImageData, ImageBitmap, ArrayBuffer, objects with [[DataView]] internal slots, Map, and Set objects. But none of that is implemented yet, so passing an object containing any of those types of objects will result in an erroneous `DataCloneError`.\n\nAll other data types should work like described in the spec. Check the tests if you don't believe me, and please create an issue if you find a problem.\n\n## License\n\nApache 2.0\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dumbmatter/realistic-structured-clone.git"
  },
  "scripts": {
    "lint": "eslint index.js test",
    "mocha": "mocha --recursive",
    "test": "npm run lint && npm run mocha"
  },
  "version": "0.0.2"
}
