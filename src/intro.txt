(function(undefined) {

  // Save reference to global object (window in browser, global on server).
  var root = this;

  /**
   * Top-level namespace. Exported for browser and CommonJS.
   * 
   * @name Kinvey
   * @namespace
   */
  var Kinvey;
  if('undefined' !== typeof exports) {
    Kinvey = exports;
  }
  else {
    Kinvey = root.Kinvey = {};
  }

  // Convenient method for binding context to anonymous callbacks.
  var bind = function(thisArg, fn) {
    return function() {
      return (fn || function() { }).apply(thisArg, arguments);
    };
  };

  // Convenient method for object extending.
  var extend = function(target, source) {
    Object.getOwnPropertyNames(source).forEach(function(property) {
      Object.defineProperty(
        target, property, Object.getOwnPropertyDescriptor(source, property) || {}
      );
    });
    return target;
  };

  // Convenient method for object inheritance.
  var inherits = function(sub, sup) {
    sub.prototype = extend(Object.create(sup.prototype), sub.prototype);
    sub._super = sup.prototype;
  };