{"version":3,"sources":["stores/cacheStore.js"],"names":[],"mappings":"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","file":"stores/cacheStore.js","sourcesContent":["import Promise from 'babybird';\nimport { NetworkStore } from './networkstore';\nimport { Response } from '../requests/response';\nimport { AuthType, HttpMethod, StatusCode } from '../enums';\nimport { InsufficientCredentialsError, KinveyError, NotFoundError } from '../errors';\nimport { LocalRequest } from '../requests/local';\nimport { NetworkRequest } from '../requests/network';\nimport { DeltaFetchRequest } from '../requests/deltafetch';\nimport { Query } from '../query';\nimport { Aggregation } from '../aggregation';\nimport { Log } from '../log';\nimport { nested } from '../utils/object';\nimport url from 'url';\nimport assign from 'lodash/assign';\nimport forEach from 'lodash/forEach';\nimport map from 'lodash/map';\nimport isArray from 'lodash/isArray';\nimport keyBy from 'lodash/keyBy';\nimport differenceBy from 'lodash/differenceBy';\nconst idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';\nconst appdataNamespace = process.env.KINVEY_DATASTORE_NAMESPACE || 'appdata';\nconst syncCollectionName = process.env.KINVEY_SYNC_COLLECTION_NAME || 'sync';\nconst kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';\n\n/**\n * The CacheStore class is used to find, save, update, remove, count and group enitities\n * in a collection on the network using a cache on the device.\n */\nclass CacheStore extends NetworkStore {\n  /**\n   * Creates a new instance of the CacheStore class.\n   *\n   * @param   {string}  name   Name of the collection\n   *\n   * @throws  {KinveyError}   If the name provided is not a string.\n   */\n  constructor(name) {\n    super(name);\n\n    /**\n     * @type {Number}\n     */\n    this.ttl = undefined;\n  }\n\n  /**\n   * The sync pathname for the store.\n   *\n   * @param   {Client}   [client]     Client\n   * @return  {string}                Sync pathname\n   */\n  get _syncPathname() {\n    if (!this.name) {\n      throw new Error('Unable to get a sync pathname for a collection with no name.');\n    }\n\n    return `/${appdataNamespace}/${this.client.appKey}/${syncCollectionName}/${this.name}`;\n  }\n\n  /**\n   * Finds all entities in a collection. A query can be optionally provided to return\n   * a subset of all entities in a collection or omitted to return all entities in\n   * a collection. The number of entities returned will adhere to the limits specified\n   * at http://devcenter.kinvey.com/rest/guides/datastore#queryrestrictions. A\n   * promise will be returned that will be resolved with the entities or rejected with\n   * an error.\n   *\n   * @param   {Query}                 [query]                                   Query used to filter result.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  find(query, options = {}) {\n    Log.debug(`Retrieving the entities in the ${this.name} collection.`, query);\n\n    options = assign({\n      useDeltaFetch: true\n    }, options);\n\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.GET,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: this._pathname\n        }),\n        properties: options.properties,\n        query: query,\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(cacheResponse => {\n      const result = {\n        cache: cacheResponse.data\n      };\n\n      result.networkPromise = this.syncCount().then(count => {\n        if (count > 0) {\n          return this.push().then(() => this.syncCount());\n        }\n\n        return count;\n      }).then(count => {\n        if (count > 0) {\n          throw new KinveyError(`Unable to load data from the network. There are ${count} entities that need ` +\n           'to be synced before data is loaded from the network.');\n        }\n\n        if (options.useDeltaFetch) {\n          const request = new DeltaFetchRequest({\n            method: HttpMethod.GET,\n            authType: AuthType.Default,\n            url: url.format({\n              protocol: this.client.protocol,\n              host: this.client.host,\n              pathname: this._pathname\n            }),\n            properties: options.properties,\n            query: query,\n            timeout: options.timeout,\n            client: this.client\n          });\n          return request.execute().then(response => response.data);\n        }\n\n        return super.find(query, options);\n      }).then(networkEntities => {\n        const removedEntities = differenceBy(cacheResponse.data, networkEntities, idAttribute);\n        const removeEntityIds = Object.keys(keyBy(removedEntities, idAttribute));\n        const removeQuery = new Query();\n        removeQuery.contains(idAttribute, removeEntityIds);\n\n        const request = new LocalRequest({\n          method: HttpMethod.DELETE,\n          url: url.format({\n            protocol: this.client.protocol,\n            host: this.client.host,\n            pathname: this._pathname\n          }),\n          properties: options.properties,\n          query: removeQuery,\n          timeout: options.timeout,\n          client: this.client\n        });\n        return request.execute().then(() => this._cache(networkEntities));\n      });\n\n      return result;\n    });\n\n    promise.then(response => {\n      Log.info(`Retrieved the entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to retrieve the entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Groups entities in a collection. An aggregation can be optionally provided to group\n   * a subset of entities in a collection or omitted to group all the entities\n   * in a collection. A promise will be returned that will be resolved with the result\n   * or rejected with an error.\n   *\n   * @param   {Aggregation}           aggregation                               Aggregation used to group entities.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  group(aggregation, options = {}) {\n    Log.debug(`Grouping the entities in the ${this.name} collection.`, aggregation, options);\n\n    options = assign({\n      force: false\n    }, options);\n\n    if (!(aggregation instanceof Aggregation)) {\n      return Promise.reject(new KinveyError('Invalid aggregation. ' +\n        'It must be an instance of the Kinvey.Aggregation class.'));\n    }\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.GET,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: `${this._pathname}/_group`\n        }),\n        properties: options.properties,\n        data: aggregation.toJSON(),\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(response => {\n      const result = {\n        cache: response.data\n      };\n\n      result.networkPromise = this.syncCount().then(count => {\n        if (count > 0) {\n          return this.push().then(() => this.syncCount());\n        }\n\n        return count;\n      }).then(count => {\n        if (count > 0) {\n          throw new KinveyError(`Unable to load data from the network. There are ${count} entities that need ` +\n           'to be synced before data is loaded from the network.');\n        }\n\n        return super.group(aggregation, options);\n      });\n\n      return result;\n    });\n\n    promise.then(response => {\n      Log.info(`Grouped the entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to group the entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Counts entities in a collection. A query can be optionally provided to count\n   * a subset of entities in a collection or omitted to count all the entities\n   * in a collection. A promise will be returned that will be resolved with the count\n   * or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query to count a subset of entities.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  count(query, options = {}) {\n    Log.debug(`Counting the number of entities in the ${this.name} collection.`, query);\n\n    options = assign({\n      force: false\n    }, options);\n\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.GET,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: `${this._pathname}/_count`\n        }),\n        properties: options.properties,\n        query: query,\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(response => {\n      const result = {\n        cache: response.data\n      };\n\n      result.networkPromise = this.syncCount().then(count => {\n        if (count > 0) {\n          return this.push().then(() => this.syncCount());\n        }\n\n        return count;\n      }).then(count => {\n        if (count > 0) {\n          throw new KinveyError(`Unable to load data from the network. There are ${count} entities that need ` +\n           'to be synced before data is loaded from the network.');\n        }\n\n        return super.count(query, options);\n      });\n\n      return result;\n    });\n\n    promise.then(response => {\n      Log.info(`Counted the number of entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to count the number of entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Retrieves a single entity in a collection by id. A promise will be returned that will\n   * be resolved with the entity or rejected with an error.\n   *\n   * @param   {string}                id                                        Document Id\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  findById(id, options = {}) {\n    if (!id) {\n      Log.warn('No id was provided to retrieve an entity.', id);\n      return Promise.resolve(null);\n    }\n\n    Log.debug(`Retrieving the entity in the ${this.name} collection with id = ${id}.`);\n\n    options = assign({\n      force: false,\n      useDeltaFetch: true\n    }, options);\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.GET,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: `${this._pathname}/${id}`\n        }),\n        properties: options.properties,\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(response => {\n      const result = {\n        cache: response.data\n      };\n\n      result.networkPromise = this.syncCount().then(count => {\n        if (count > 0) {\n          return this.push().then(() => this.syncCount());\n        }\n\n        return count;\n      }).then(count => {\n        if (count > 0) {\n          throw new KinveyError(`Unable to load data from the network. There are ${count} entities that need ` +\n           'to be synced before data is loaded from the network.');\n        }\n\n        if (options.useDeltaFetch) {\n          const request = new DeltaFetchRequest({\n            method: HttpMethod.GET,\n            authType: AuthType.Default,\n            url: url.format({\n              protocol: this.client.protocol,\n              host: this.client.host,\n              pathname: `${this._pathname}/${id}`\n            }),\n            properties: options.properties,\n            timeout: options.timeout,\n            client: this.client\n          });\n          return request.execute().then(response => response.data);\n        }\n\n        return super.findById(id, options);\n      }).then(data => this._cache(data)).catch(error => {\n        if (error instanceof NotFoundError) {\n          const request = new LocalRequest({\n            method: HttpMethod.DELETE,\n            authType: AuthType.Default,\n            url: url.format({\n              protocol: this.client.protocol,\n              host: this.client.host,\n              pathname: `${this._pathname}/${id}`\n            }),\n            properties: options.properties,\n            timeout: options.timeout,\n            client: this.client\n          });\n          return request.execute().then(() => {\n            throw error;\n          });\n        }\n\n        throw error;\n      });\n\n      return result;\n    });\n\n    promise.then(response => {\n      Log.info(`Retrieved the entity in the ${this.name} collection with id = ${id}.`, response);\n    }).catch(error => {\n      Log.error(`Failed to retrieve the entity in the ${this.name} collection with id = ${id}.`, error);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Save a entity or an array of entities to a collection. A promise will be returned that\n   * will be resolved with the saved entity/entities or rejected with an error.\n   *\n   * @param   {Object|Array}          entities                                  Entity or entities to save.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data saved\n   *                                                                            in the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  save(entity, options = {}) {\n    if (!entity) {\n      Log.warn('No entity was provided to be saved.', entity);\n      return Promise.resolve(null);\n    }\n\n    Log.debug(`Saving the entity(s) to the ${this.name} collection.`, entity);\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.POST,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: this._pathname\n        }),\n        properties: options.properties,\n        data: entity,\n        timeout: options.timeout,\n        client: this.client\n      });\n\n      if (entity[idAttribute]) {\n        request.method = HttpMethod.PUT;\n        request.url = url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: `${this._pathname}/${entity[idAttribute]}`\n        });\n      }\n\n      return request.execute();\n    }).then(response => {\n      const promise = this._sync(response.data, options).then(() => {\n        const data = isArray(response.data) ? response.data : [response.data];\n        const ids = Object.keys(keyBy(data, idAttribute));\n        const query = new Query().contains(idAttribute, ids);\n        return this.push(query, options);\n      }).then(() => response.data);\n      return promise;\n    });\n\n    promise.then(response => {\n      Log.info(`Saved the entity(s) to the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to save the entity(s) to the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Remove entities in a collection. A query can be optionally provided to remove\n   * a subset of entities in a collection or omitted to remove all entities in a\n   * collection. A promise will be returned that will be resolved with a count of the\n   * number of entities removed or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   */\n  remove(query, options = {}) {\n    Log.debug(`Removing the entities in the ${this.name} collection.`, query);\n\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.DELETE,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: this._pathname\n        }),\n        properties: options.properties,\n        query: query,\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(response => {\n      const promise = this._sync(response.data.entities, options).then(() => {\n        const query = new Query().contains(idAttribute, []);\n        return this.push(query, options);\n      }).then(() => response.data);\n      return promise;\n    });\n\n    promise.then(response => {\n      Log.info(`Removed the entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to remove the entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Remove an entity in a collection. A promise will be returned that will be\n   * resolved with a count of the number of entities removed or rejected with an error.\n   *\n   * @param   {string}                id                                        Document Id\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   */\n  removeById(id, options = {}) {\n    if (!id) {\n      Log.warn('No id was provided to be removed.', id);\n      return Promise.resolve(null);\n    }\n\n    Log.debug(`Removing an entity in the ${this.name} collection with id = ${id}.`);\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.DELETE,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: `${this._pathname}/${id}`\n        }),\n        properties: options.properties,\n        authType: AuthType.Default,\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(response => {\n      const promise = this._sync(response.data.entities, options).then(() => {\n        const query = new Query().contains(idAttribute, [id]);\n        return this.push(query, options);\n      }).then(() => response.data);\n      return promise;\n    });\n\n    promise.then(response => {\n      Log.info(`Removed the entity in the ${this.name} collection with id = ${id}.`, response);\n    }).catch(err => {\n      Log.error(`Failed to remove the entity in the ${this.name} collection with id = ${id}.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Push sync items for a collection to the network. A promise will be returned that will be\n   * resolved with the result of the push or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query to push a subset of items.\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   *\n   * @example\n   * var store = Kinvey.DataStore.getInstance('books');\n   * store.push().then(function(result) {\n   *   ...\n   * }).catch(function(err) {\n   *   ...\n   * });\n   */\n  push(query, options = {}) {\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const promise = Promise.resolve().then(() => {\n      const request = new LocalRequest({\n        method: HttpMethod.GET,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: this._syncPathname\n        }),\n        properties: options.properties,\n        query: query,\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(response => {\n      const save = [];\n      const remove = [];\n      const entities = response.data.entities;\n      const ids = Object.keys(entities);\n      let size = response.data.size;\n\n      const promises = map(ids, id => {\n        const metadata = entities[id];\n        const request = new LocalRequest({\n          method: HttpMethod.GET,\n          url: url.format({\n            protocol: this.client.protocol,\n            host: this.client.host,\n            pathname: `${this._pathname}/${id}`\n          }),\n          properties: metadata.properties,\n          timeout: options.timeout,\n          client: this.client\n        });\n        return request.execute().then(response => {\n          save.push(response.data);\n          return response.data;\n        }).catch(err => {\n          if (err instanceof NotFoundError) {\n            remove.push(id);\n            return null;\n          }\n\n          throw err;\n        });\n      });\n\n      return Promise.all(promises).then(() => {\n        const saved = map(save, entity => {\n          const metadata = entities[entity[idAttribute]];\n          const isLocalEntity = nested(entity, `${kmdAttribute}.local`);\n\n          if (isLocalEntity) {\n            const originalId = entity[idAttribute];\n            delete entity[idAttribute];\n            delete entity[kmdAttribute];\n\n            const request = new NetworkRequest({\n              method: HttpMethod.POST,\n              authType: AuthType.Default,\n              url: url.format({\n                protocol: this.client.protocol,\n                host: this.client.host,\n                pathname: this._pathname\n              }),\n              properties: metadata.properties,\n              data: entity,\n              timeout: options.timeout,\n              client: this.client\n            });\n\n            return request.execute().then(response => {\n              const request = new LocalRequest({\n                method: HttpMethod.PUT,\n                url: url.format({\n                  protocol: this.client.protocol,\n                  host: this.client.host,\n                  pathname: this._pathname\n                }),\n                properties: metadata.properties,\n                data: response.data,\n                timeout: options.timeout,\n                client: this.client\n              });\n              return request.execute();\n            }).then(() => {\n              const request = new LocalRequest({\n                method: HttpMethod.DELETE,\n                url: url.format({\n                  protocol: this.client.protocol,\n                  host: this.client.host,\n                  pathname: `${this._pathname}/${originalId}`\n                }),\n                properties: metadata.properties,\n                timeout: options.timeout,\n                client: this.client\n              });\n\n              return request.execute().then(response => {\n                const result = response.data;\n                if (result.count === 1) {\n                  size = size - 1;\n                  delete entities[originalId];\n                  return {\n                    _id: originalId,\n                    entity: entity\n                  };\n                }\n\n                return {\n                  _id: originalId,\n                  error: new KinveyError(`Expected count to be 1 but instead it was ${result.count} ` +\n                    `when trying to remove entity with _id ${originalId}.`)\n                };\n              });\n            }).catch(error => {\n              const result = { _id: originalId, error: error };\n              return result;\n            });\n          }\n\n          const request = new NetworkRequest({\n            method: HttpMethod.PUT,\n            authType: AuthType.Default,\n            url: url.format({\n              protocol: this.client.protocol,\n              host: this.client.host,\n              pathname: `${this._pathname}/${entity[idAttribute]}`\n            }),\n            properties: metadata.properties,\n            data: entity,\n            timeout: options.timeout,\n            client: this.client\n          });\n\n          return request.execute().then(response => {\n            size = size - 1;\n            delete entities[response.data[idAttribute]];\n            return {\n              _id: response.data[idAttribute],\n              entity: response.data\n            };\n          }).catch(err => {\n            // If the credentials used to authenticate this request are\n            // not authorized to run the operation then just remove the entity\n            // from the sync table\n            if (err instanceof InsufficientCredentialsError) {\n              size = size - 1;\n              delete entities[entity[idAttribute]];\n              return {\n                _id: entity[idAttribute],\n                error: err\n              };\n            }\n\n            return {\n              _id: entity[idAttribute],\n              error: err\n            };\n          });\n        });\n\n        const removed = map(remove, id => {\n          const metadata = entities[id];\n          const request = new NetworkRequest({\n            method: HttpMethod.DELETE,\n            authType: AuthType.Default,\n            url: url.format({\n              protocol: this.client.protocol,\n              host: this.client.host,\n              pathname: `${this._pathname}/${id}`\n            }),\n            properties: metadata.properties,\n            timeout: options.timeout,\n            client: this.client\n          });\n\n          return request.execute().then(response => {\n            const result = response.data;\n\n            if (result.count === 1) {\n              size = size - 1;\n              delete entities[id];\n              return {\n                _id: id\n              };\n            }\n\n            return {\n              _id: id,\n              error: new KinveyError(`Expected count to be 1 but instead it was ${result.count} ` +\n                `when trying to remove entity with _id ${id}.`)\n            };\n          }).catch(err => {\n            // If the credentials used to authenticate this request are\n            // not authorized to run the operation or the entity was\n            // not found then just remove the entity from the sync table\n            if (err instanceof NotFoundError || err instanceof InsufficientCredentialsError) {\n              size = size - 1;\n              delete entities[id];\n              return {\n                _id: id,\n                error: err\n              };\n            }\n\n            return {\n              _id: id,\n              error: err\n            };\n          });\n        });\n\n        return Promise.all([Promise.all(saved), Promise.all(removed)]);\n      }).then(results => {\n        const savedResults = results[0];\n        const removedResults = results[1];\n        const result = {\n          collection: this.name,\n          success: [],\n          error: []\n        };\n\n        forEach(savedResults, savedResult => {\n          if (savedResult.error) {\n            result.error.push(savedResult);\n          } else {\n            result.success.push(savedResult);\n          }\n        });\n\n        forEach(removedResults, removedResult => {\n          if (removedResult.error) {\n            result.error.push(removedResult);\n          } else {\n            result.success.push(removedResult);\n          }\n        });\n\n        return result;\n      }).then(result => {\n        response.data.size = size;\n        response.data.entities = entities;\n\n        const request = new LocalRequest({\n          method: HttpMethod.PUT,\n          url: url.format({\n            protocol: this.client.protocol,\n            host: this.client.host,\n            pathname: this._syncPathname\n          }),\n          properties: options.properties,\n          data: response.data,\n          timeout: options.timeout,\n          client: this.client\n        });\n        return request.execute().then(() => result);\n      });\n    }).catch(err => {\n      if (err instanceof NotFoundError) {\n        return {\n          collection: this.name,\n          success: [],\n          error: []\n        };\n      }\n\n      throw err;\n    });\n\n    return promise;\n  }\n\n  /**\n   * Pull items for a collection from the network to your local cache. A promise will be\n   * returned that will be resolved with the result of the pull or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query to pull a subset of items.\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   *\n   * @example\n   * var store = Kinvey.Store.getInstance('books');\n   * store.pull().then(function(result) {\n   *   ...\n   * }).catch(function(err) {\n   *   ...\n   * });\n   */\n  pull(query, options = {}) {\n    const promise = this.syncCount(null, options).then(count => {\n      if (count > 0) {\n        throw new KinveyError('Unable to pull data. You must push the pending sync items first.',\n          'Call store.push() to push the pending sync items before you pull new data.');\n      }\n\n      return this.find(query, options);\n    }).then(result => result.network);\n    return promise;\n  }\n\n  /**\n   * Sync items for a collection. This will push pending sync items first and then\n   * pull items from the network into your local cache. A promise will be\n   * returned that will be resolved with the result of the pull or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query to pull a subset of items.\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   *\n   * @example\n   * var store = Kinvey.Store.getInstance('books');\n   * store.sync().then(function(result) {\n   *   ...\n   * }).catch(function(err) {\n   *   ...\n   * });\n   */\n  sync(query, options = {}) {\n    const promise = this.push(null, options).then(pushResponse => {\n      const promise = this.pull(query, options).then(pullResponse => {\n        const result = {\n          push: pushResponse,\n          pull: pullResponse\n        };\n        return result;\n      });\n      return promise;\n    });\n    return promise;\n  }\n\n  /**\n   * Count the number of entities waiting to be pushed to the network. A promise will be\n   * returned with the count of entities or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query to count a subset of entities.\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the local cache.\n   * @return  {Promise}                                                         Promise\n   *\n   * @example\n   * var store = Kinvey.Store.getInstance('books');\n   * store.syncCount().then(function(count) {\n   *   ...\n   * }).catch(function(err) {\n   *   ...\n   * });\n   */\n  syncCount(query, options = {}) {\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const request = new LocalRequest({\n      method: HttpMethod.GET,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: this._syncPathname\n      }),\n      properties: options.properties,\n      query: query,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data.size || 0).catch(err => {\n      if (err instanceof NotFoundError) {\n        return 0;\n      }\n\n      throw err;\n    });\n\n    return promise;\n  }\n\n  /**\n   * Add or update entities stored in the cache. A promise will be returned with the entities\n   * or rejected with an error.\n   *\n   * @param   {Object|Array}          entities                                  Entity(s) to add or update in the cache.\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   */\n  _cache(entities, options = {}) {\n    const request = new LocalRequest({\n      method: HttpMethod.PUT,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: this._pathname\n      }),\n      properties: options.properties,\n      data: entities,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n    return promise;\n  }\n\n  /**\n   * Add entities to be pushed. A promise will be returned with null or rejected with an error.\n   *\n   * @param   {Object|Array}          entities                                  Entity(s) to add to the sync table.\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   */\n  _sync(entities, options = {}) {\n    if (!this.name) {\n      return Promise.reject(new KinveyError('Unable to add entities to the sync table for a store with no name.'));\n    }\n\n    if (!entities) {\n      return Promise.resolve(null);\n    }\n\n    const request = new LocalRequest({\n      method: HttpMethod.GET,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: this._syncPathname\n      }),\n      properties: options.properties,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().catch(error => {\n      if (error instanceof NotFoundError) {\n        return new Response({\n          statusCode: StatusCode.Ok,\n          data: {\n            _id: this.name,\n            entities: {},\n            size: 0\n          }\n        });\n      }\n\n      throw error;\n    }).then(response => {\n      const syncData = response.data || {\n        _id: this.name,\n        entities: {},\n        size: 0\n      };\n\n      if (!isArray(entities)) {\n        entities = [entities];\n      }\n\n      forEach(entities, entity => {\n        if (entity[idAttribute]) {\n          if (!syncData.entities.hasOwnProperty(entity[idAttribute])) {\n            syncData.size = syncData.size + 1;\n          }\n\n          syncData.entities[entity[idAttribute]] = {\n            lmt: entity[kmdAttribute] ? entity[kmdAttribute].lmt : null\n          };\n        }\n      });\n\n      const request = new LocalRequest({\n        method: HttpMethod.PUT,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: this._syncPathname\n        }),\n        properties: options.properties,\n        data: syncData,\n        timeout: options.timeout,\n        client: this.client\n      });\n      return request.execute();\n    }).then(() => null);\n\n    return promise;\n  }\n}\n\nexport { CacheStore };\n"],"sourceRoot":"/source/"}