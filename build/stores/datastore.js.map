{"version":3,"sources":["stores/datastore.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;AAKA,IAAM,gBAAgB;AACpB,QAAM,MAAN;AACA,SAAO,OAAP;AACA,WAAS,SAAT;AACA,QAAM,MAAN;AACA,QAAM,MAAN;CALI;AAON,OAAO,MAAP,CAAc,aAAd;QACS;;IAGI;;;;;;;;;;;;;;;gCAQQ,MAAkC;UAA5B,6DAAO,cAAc,KAAd,gBAAqB;;AACnD,UAAI,cAAJ,CADmD;;AAGnD,cAAQ,IAAR;AACE,aAAK,cAAc,IAAd;AACH,kBAAQ,yBAAc,IAAd,CAAR,CADF;AAEE,gBAFF;AADF,aAIO,cAAc,OAAd;AACH,kBAAQ,+BAAiB,IAAjB,CAAR,CADF;AAEE,gBAFF;AAJF,aAOO,cAAc,IAAd;AACH,kBAAQ,0BAAR,CADF;AAEE,gBAFF;AAPF,aAUO,cAAc,IAAd;AACH,kBAAQ,0BAAR,CADF;AAEE,gBAFF;AAVF,aAaO,cAAc,KAAd,CAbP;AAcE;AACE,kBAAQ,2BAAe,IAAf,CAAR,CADF;AAdF,OAHmD;;AAqBnD,aAAO,KAAP,CArBmD;;;;SAR1C","file":"stores/datastore.js","sourcesContent":["import { SyncStore } from './syncstore';\nimport { NetworkStore } from './networkstore';\nimport { UserStore } from './userstore';\nimport { FileStore } from './filestore';\nimport { CacheStore } from './cachestore';\n\n/**\n * Enum for DataStore types.\n */\nconst DataStoreType = {\n  Sync: 'Sync',\n  Cache: 'Cache',\n  Network: 'Network',\n  User: 'User',\n  File: 'File'\n};\nObject.freeze(DataStoreType);\nexport { DataStoreType };\n\n\nexport class DataStore {\n  /**\n   * Returns an instance of the Store class based on the type provided.\n   *\n   * @param  {string}       [name]                      Name of the collection.\n   * @param  {StoreType}    [type=DataStoreType.Cache]  Type of store to return.\n   * @return {Object}                                   Store\n   */\n  static getInstance(name, type = DataStoreType.Cache) {\n    let store;\n\n    switch (type) {\n      case DataStoreType.Sync:\n        store = new SyncStore(name);\n        break;\n      case DataStoreType.Network:\n        store = new NetworkStore(name);\n        break;\n      case DataStoreType.User:\n        store = new UserStore();\n        break;\n      case DataStoreType.File:\n        store = new FileStore();\n        break;\n      case DataStoreType.Cache:\n      default:\n        store = new CacheStore(name);\n    }\n\n    return store;\n  }\n}\n"],"sourceRoot":"/source/"}