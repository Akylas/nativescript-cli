{"version":3,"sources":["stores/filestore.js"],"names":[],"mappings":"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","file":"stores/filestore.js","sourcesContent":["import Promise from 'babybird';\nimport { NetworkStore } from './networkstore';\nimport { NetworkRequest } from '../requests/network';\nimport { AuthType, HttpMethod } from '../enums';\nimport { KinveyError } from '../errors';\nimport url from 'url';\nimport assign from 'lodash/assign';\nimport map from 'lodash/map';\nconst filesNamespace = process.env.KINVEY_FILES_NAMESPACE || 'blob';\nconst idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';\n\n/**\n * The FilesStore class is used to find, save, update, remove, count and group files.\n */\nexport class FileStore extends NetworkStore {\n  /**\n   * The pathname for the store.\n   *\n   * @return  {string}                Pathname\n   */\n  get _pathname() {\n    return `/${filesNamespace}/${this.client.appKey}`;\n  }\n\n  /**\n   * Finds all files. A query can be optionally provided to return\n   * a subset of all the files for your application or omitted to return all the files.\n   * The number of files returned will adhere to the limits specified\n   * at http://devcenter.kinvey.com/rest/guides/datastore#queryrestrictions. A\n   * promise will be returned that will be resolved with the files or rejected with\n   * an error.\n   *\n   * @param   {Query}                 [query]                                   Query used to filter result.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Boolean}               [options.tls]                             Use Transport Layer Security\n   * @param   {Boolean}               [options.download]                        Download the files\n   * @return  {Promise}                                                         Promise\n   *\n   * @example\n   * var filesStore = new Kinvey.FilesStore();\n   * var query = new Kinvey.Query();\n   * query.equalTo('location', 'Boston');\n   * files.find(query, {\n   *   tls: true, // Use transport layer security\n   *   ttl: 60 * 60 * 24, // 1 day in seconds\n   *   download: true // download the files\n   * }).then(function(files) {\n   *   ...\n   * }).catch(function(err) {\n   *   ...\n   * });\n   */\n  find(query, options = {}) {\n    options = assign({\n      download: false,\n      tls: false\n    }, options);\n\n    options.flags = {\n      tls: options.tls === true,\n      ttl_in_seconds: options.ttl\n    };\n\n    const promise = super.find(query, options).then(files => {\n      if (options.download === true) {\n        const promises = map(files, file => this.downloadByUrl(file._downloadURL, options));\n        return Promise.all(promises);\n      }\n\n      return files;\n    });\n\n    return promise;\n  }\n\n  findById(id, options) {\n    return this.download(id, options);\n  }\n\n  /**\n   * Download a file. A promise will be returned that will be resolved with the file or rejected with\n   * an error.\n   *\n   * @param   {string}        name                                          Name\n   * @param   {Object}        [options]                                     Options\n   * @param   {Boolean}       [options.tls]                                 Use Transport Layer Security\n   * @param   {Number}        [options.ttl]                                 Time To Live (in seconds)\n   * @param   {Boolean}       [options.stream]                              Stream the file\n   * @param   {DataPolicy}    [options.dataPolicy=DataPolicy.NetworkFirst]    Data policy\n   * @param   {AuthType}      [options.authType=AuthType.Default]           Auth type\n   * @return  {Promise}                                                     Promise\n   *\n   * @example\n   * var files = new Kinvey.Files();\n   * files.download('BostonTeaParty.png', {\n   *   tls: true, // Use transport layer security\n   *   ttl: 60 * 60 * 24, // 1 day in seconds\n   *   stream: true // stream the file\n   * }).then(function(file) {\n   *   ...\n   * }).catch(function(err) {\n   *   ...\n   * });\n   */\n  download(name, options = {}) {\n    options = assign({\n      stream: false,\n      tls: false\n    }, options);\n\n    options.flags = {\n      tls: options.tls === true,\n      ttl_in_seconds: options.ttl\n    };\n\n    const promise = super.findById(name, options).then(file => {\n      if (options.stream === true) {\n        return file;\n      }\n\n      return this.downloadByUrl(file._downloadURL, options);\n    });\n\n    return promise;\n  }\n\n  downloadByUrl(url, options = {}) {\n    const promise = Promise.resolve().then(() => {\n      const request = new NetworkRequest({\n        method: HttpMethod.GET,\n        url: url,\n        timeout: options.timeout\n      });\n      request.setHeader('Accept', options.mimeType || 'application-octet-stream');\n      request.removeHeader('Content-Type');\n      request.removeHeader('X-Kinvey-Api-Version');\n      return request.execute();\n    }).then(response => response.data);\n\n    return promise;\n  }\n\n  /**\n   * Stream a file. A promise will be returned that will be resolved with the file or rejected with\n   * an error.\n   *\n   * @param   {string}        name                                          File name\n   * @param   {Object}        [options]                                     Options\n   * @param   {Boolean}       [options.tls]                                 Use Transport Layer Security\n   * @param   {Number}        [options.ttl]                                 Time To Live (in seconds)\n   * @param   {DataPolicy}    [options.dataPolicy=DataPolicy.NetworkFirst]    Data policy\n   * @param   {AuthType}      [options.authType=AuthType.Default]           Auth type\n   * @return  {Promise}                                                     Promise\n   *\n   * @example\n   * var files = new Kinvey.Files();\n   * files.stream('BostonTeaParty.png', {\n   *   tls: true, // Use transport layer security\n   *   ttl: 60 * 60 * 24, // 1 day in seconds\n   * }).then(function(file) {\n   *   ...\n   * }).catch(function(err) {\n   *   ...\n   * });\n   */\n  stream(name, options = {}) {\n    options.stream = true;\n    return this.download(name, options);\n  }\n\n  upload(file, metadata = {}, options = {}) {\n    metadata._filename = metadata._filename || file._filename || file.name;\n    metadata.size = metadata.size || file.size || file.length;\n    metadata.mimeType = metadata.mimeType || file.mimeType || file.type || 'application/octet-stream';\n\n    options = assign({\n      properties: null,\n      timeout: undefined,\n      public: false,\n      handler() {}\n    }, options);\n\n    if (options.public) {\n      metadata._public = true;\n    }\n\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      headers: {\n        'X-Kinvey-Content-Type': metadata.mimeType\n      },\n      authType: AuthType.Default,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: this._pathname\n      }),\n      properties: options.properties,\n      timeout: options.timeout,\n      data: metadata,\n      client: this.client\n    });\n\n    if (metadata[idAttribute]) {\n      request.method = HttpMethod.PUT;\n      request.url = url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/${metadata._id}`\n      });\n    }\n\n    const promise = request.execute().then(response => {\n      const uploadUrl = response.data._uploadURL;\n      const headers = response.data._requiredHeaders || {};\n      headers['Content-Type'] = metadata.mimeType;\n      headers['Content-Length'] = metadata.size;\n\n      // Delete fields from the response\n      delete response.data._expiresAt;\n      delete response.data._requiredHeaders;\n      delete response.data._uploadURL;\n\n      // Upload the file\n      const request = new NetworkRequest({\n        method: HttpMethod.PUT,\n        url: uploadUrl,\n        data: file\n      });\n      request.clearHeaders();\n      request.addHeaders(headers);\n\n      return request.execute().then(uploadResponse => {\n        if (uploadResponse.isSuccess()) {\n          response.data._data = file;\n          return response.data;\n        }\n\n        throw uploadResponse.error;\n      });\n    });\n\n    return promise;\n  }\n\n  save() {\n    return Promise.reject(new KinveyError('Please use `upload()` to save files.'));\n  }\n\n  update() {\n    return Promise.reject(new KinveyError('Please use `upload()` to update files.'));\n  }\n}\n"],"sourceRoot":"/source/"}