{"version":3,"sources":["stores/userstore.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AACA,IAAM,iBAAiB,QAAQ,GAAR,CAAY,sBAAZ,IAAsC,MAAtC;AACvB,IAAM,eAAe,QAAQ,GAAR,CAAY,oBAAZ,IAAoC,KAApC;AACrB,IAAM,cAAc,QAAQ,GAAR,CAAY,mBAAZ,IAAmC,KAAnC;AACpB,IAAM,0BAA0B,QAAQ,GAAR,CAAY,gCAAZ,IAAgD,iBAAhD;;IAEnB;;;;;;;;;;;yBAUN,MAAoB;;;UAAd,gEAAU,kBAAI;;AACvB,UAAM,UAAU,mBAAQ,OAAR,GAAkB,IAAlB,CAAuB,YAAM;AAC3C,YAAI,CAAC,IAAD,EAAO;AACT,gBAAM,wBAAgB,qCAAhB,CAAN,CADS;SAAX;;AAIA,YAAI,uBAAQ,IAAR,CAAJ,EAAmB;AACjB,gBAAM,wBAAgB,wCAAhB,EAA0D,IAA1D,CAAN,CADiB;SAAnB;;AAIA,YAAI,CAAC,KAAK,WAAL,CAAD,EAAoB;AACtB,gBAAM,wBAAgB,wBAAhB,CAAN,CADsB;SAAxB;;AAIA,YAAI,QAAQ,SAAR,EAAmB;AACrB,cAAM,iBAAiB,KAAK,uBAAL,CAAjB,CADe;AAErB,cAAI,cAAJ,EAAoB;AAClB,iBAAK,IAAM,QAAN,IAAkB,cAAvB,EAAuC;AACrC,kBAAI,eAAe,cAAf,CAA8B,QAA9B,CAAJ,EAA6C;AAC3C,oBAAI,eAAe,QAAf,KAA4B,QAAQ,SAAR,KAAsB,QAAtB,EAAgC;AAC9D,yBAAO,eAAe,QAAf,CAAP,CAD8D;iBAAhE;eADF;aADF;WADF;SAFF;;AAaA,0CArCO,mDAqCW,MAAM,QAAxB,CA1B2C;OAAN,CAAjC,CADiB;;AA8BvB,aAAO,OAAP,CA9BuB;;;;2BAiClB,UAAU,SAAS;AACxB,UAAM,UAAU,4BAAmB;AACjC,gBAAQ,kBAAW,IAAX;AACR,kBAAU,gBAAS,GAAT;AACV,aAAK,cAAI,MAAJ,CAAW;AACd,oBAAU,KAAK,MAAL,CAAY,QAAZ;AACV,gBAAM,KAAK,MAAL,CAAY,IAAZ;AACN,0BAAc,qBAAgB,KAAK,MAAL,CAAY,MAAZ,2BAA9B;SAHG,CAAL;AAKA,oBAAY,QAAQ,UAAR;AACZ,cAAM,EAAE,UAAU,QAAV,EAAR;AACA,iBAAS,QAAQ,OAAR;AACT,gBAAQ,KAAK,MAAL;OAXM,CAAV,CADkB;;AAexB,UAAM,UAAU,QAAQ,OAAR,GAAkB,IAAlB,CAAuB;eAAY,SAAS,IAAT,CAAc,cAAd;OAAZ,CAAjC,CAfkB;AAgBxB,aAAO,OAAP,CAhBwB;;;;4BAmBlB,IAAkB;UAAd,gEAAU,kBAAI;;AACxB,UAAM,UAAU,4BAAmB;AACjC,gBAAQ,kBAAW,IAAX;AACR,kBAAU,gBAAS,MAAT;AACV,aAAK,cAAI,MAAJ,CAAW;AACd,oBAAU,KAAK,MAAL,CAAY,QAAZ;AACV,gBAAM,KAAK,MAAL,CAAY,IAAZ;AACN,oBAAa,KAAK,SAAL,QAAb;SAHG,CAAL;AAKA,oBAAY,QAAQ,UAAR;AACZ,iBAAS,QAAQ,OAAR;AACT,gBAAQ,KAAK,MAAL;OAVM,CAAV,CADkB;;AAcxB,UAAM,UAAU,QAAQ,OAAR,GAAkB,IAAlB,CAAuB;eAAY,SAAS,IAAT;OAAZ,CAAjC,CAdkB;AAexB,aAAO,OAAP,CAfwB;;;;;;;;;;wBAxDV;AACd,mBAAW,uBAAkB,KAAK,MAAL,CAAY,MAAZ,CADf;;;;SANL","file":"stores/userstore.js","sourcesContent":["import Promise from 'babybird';\nimport { KinveyError } from '../errors';\nimport { NetworkStore } from './networkstore';\nimport { AuthType, HttpMethod } from '../enums';\nimport { NetworkRequest } from '../requests/network';\nimport url from 'url';\nimport isArray from 'lodash/isArray';\nconst usersNamespace = process.env.KINVEY_USERS_NAMESPACE || 'user';\nconst rpcNamespace = process.env.KINVEY_RPC_NAMESPACE || 'rpc';\nconst idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';\nconst socialIdentityAttribute = process.env.KINVEY_SOCIAL_IDENTITY_ATTRIBUTE || '_socialIdentity';\n\nexport class UserStore extends NetworkStore {\n  /**\n   * The pathname for the store.\n   *\n   * @return  {string}   Pathname\n   */\n  get _pathname() {\n    return `/${usersNamespace}/${this.client.appKey}`;\n  }\n\n  save(user, options = {}) {\n    const promise = Promise.resolve().then(() => {\n      if (!user) {\n        throw new KinveyError('No user was provided to be updated.');\n      }\n\n      if (isArray(user)) {\n        throw new KinveyError('Please only update one user at a time.', user);\n      }\n\n      if (!user[idAttribute]) {\n        throw new KinveyError('User must have an _id.');\n      }\n\n      if (options._identity) {\n        const socialIdentity = user[socialIdentityAttribute];\n        if (socialIdentity) {\n          for (const identity in socialIdentity) {\n            if (socialIdentity.hasOwnProperty(identity)) {\n              if (socialIdentity[identity] && options._identity !== identity) {\n                delete socialIdentity[identity];\n              }\n            }\n          }\n        }\n      }\n\n      return super.save(user, options);\n    });\n\n    return promise;\n  }\n\n  exists(username, options) {\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      authType: AuthType.App,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `/${rpcNamespace}/${this.client.appKey}/check-username-exists`\n      }),\n      properties: options.properties,\n      data: { username: username },\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data.usernameExists);\n    return promise;\n  }\n\n  restore(id, options = {}) {\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      authType: AuthType.Master,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/id`\n      }),\n      properties: options.properties,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n    return promise;\n  }\n}\n"],"sourceRoot":"/source/"}