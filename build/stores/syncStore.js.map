{"version":3,"sources":["stores/syncStore.js"],"names":[],"mappings":"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","file":"stores/syncStore.js","sourcesContent":["import Promise from 'babybird';\nimport { CacheStore } from './cachestore';\nimport { LocalRequest } from '../requests/local';\nimport { Aggregation } from '../aggregation';\nimport { HttpMethod } from '../enums';\nimport { KinveyError } from '../errors';\nimport { Query } from '../query';\nimport { Log } from '../log';\nimport url from 'url';\nconst idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';\n\nexport class SyncStore extends CacheStore {\n\n  /**\n   * Finds all entities in a collection. A query can be optionally provided to return\n   * a subset of all entities in a collection or omitted to return all entities in\n   * a collection. The number of entities returned will adhere to the limits specified\n   * at http://devcenter.kinvey.com/rest/guides/datastore#queryrestrictions. A\n   * promise will be returned that will be resolved with the entities or rejected with\n   * an error.\n   *\n   * @param   {Query}                 [query]                                   Query used to filter result.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  find(query, options = {}) {\n    Log.debug(`Retrieving the entities in the ${this.name} collection.`, query);\n\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const request = new LocalRequest({\n      method: HttpMethod.GET,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: this._pathname\n      }),\n      properties: options.properties,\n      query: query,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n\n    promise.then(response => {\n      Log.info(`Retrieved the entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to retrieve the entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Groups entities in a collection. An aggregation can be optionally provided to group\n   * a subset of entities in a collection or omitted to group all the entities\n   * in a collection. A promise will be returned that will be resolved with the result\n   * or rejected with an error.\n   *\n   * @param   {Aggregation}           aggregation                               Aggregation used to group entities.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  group(aggregation, options = {}) {\n    Log.debug(`Grouping the entities in the ${this.name} collection.`, aggregation, options);\n\n    if (!(aggregation instanceof Aggregation)) {\n      return Promise.reject(new KinveyError('Invalid aggregation. ' +\n        'It must be an instance of the Kinvey.Aggregation class.'));\n    }\n\n    const request = new LocalRequest({\n      method: HttpMethod.GET,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/_group`\n      }),\n      properties: options.properties,\n      data: aggregation.toJSON(),\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n\n    promise.then(response => {\n      Log.info(`Grouped the entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to group the entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Counts entities in a collection. A query can be optionally provided to count\n   * a subset of entities in a collection or omitted to count all the entities\n   * in a collection. A promise will be returned that will be resolved with the count\n   * or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query to count a subset of entities.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  count(query, options = {}) {\n    Log.debug(`Counting the number of entities in the ${this.name} collection.`, query);\n\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const request = new LocalRequest({\n      method: HttpMethod.GET,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/_count`\n      }),\n      properties: options.properties,\n      query: query,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n\n    promise.then(response => {\n      Log.info(`Counted the number of entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to count the number of entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Retrieves a single entity in a collection by id. A promise will be returned that will\n   * be resolved with the entity or rejected with an error.\n   *\n   * @param   {string}                id                                        Document Id\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data retrieved\n   *                                                                            from the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  findById(id, options = {}) {\n    if (!id) {\n      Log.warn('No id was provided to retrieve an entity.', id);\n      return Promise.resolve(null);\n    }\n\n    Log.debug(`Retrieving the entity in the ${this.name} collection with id = ${id}.`);\n\n    const request = new LocalRequest({\n      method: HttpMethod.GET,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/${id}`\n      }),\n      properties: options.properties,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n\n    promise.then(response => {\n      Log.info(`Retrieved the entity in the ${this.name} collection with id = ${id}.`, response);\n    }).catch(err => {\n      Log.error(`Failed to retrieve the entity in the ${this.name} collection with id = ${id}.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Save a entity or an array of entities to a collection. A promise will be returned that\n   * will be resolved with the saved entity/entities or rejected with an error.\n   *\n   * @param   {Object|Array}          entities                                  Entity or entities to save.\n   * @param   {Object}                [options]                                 Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @param   {Number}                [options.ttl]                             Time to live for data saved\n   *                                                                            in the cache.\n   * @return  {Promise}                                                         Promise\n   */\n  save(entity, options = {}) {\n    if (!entity) {\n      Log.warn('No entity was provided to be saved.', entity);\n      return Promise.resolve(null);\n    }\n\n    Log.debug(`Saving the entity(s) to the ${this.name} collection.`, entity);\n\n    const request = new LocalRequest({\n      method: HttpMethod.POST,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: this._pathname\n      }),\n      properties: options.properties,\n      data: entity,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    if (entity[idAttribute]) {\n      request.url = url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/${entity[idAttribute]}`\n      });\n    }\n\n    const promise = request.execute().then(response => this._sync(response.data, options).then(() => response.data));\n\n    promise.then(response => {\n      Log.info(`Saved the entity(s) to the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to save the entity(s) to the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Remove entities in a collection. A query can be optionally provided to remove\n   * a subset of entities in a collection or omitted to remove all entities in a\n   * collection. A promise will be returned that will be resolved with a count of the\n   * number of entities removed or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   */\n  remove(query, options = {}) {\n    Log.debug(`Removing the entities in the ${this.name} collection.`, query);\n\n    if (query && !(query instanceof Query)) {\n      return Promise.reject(new KinveyError('Invalid query. It must be an instance of the Kinvey.Query class.'));\n    }\n\n    const request = new LocalRequest({\n      method: HttpMethod.DELETE,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: this._pathname\n      }),\n      properties: options.properties,\n      query: query,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute()\n      .then(response => this._sync(response.data.entities, options).then(() => response.data));\n\n    promise.then(response => {\n      Log.info(`Removed the entities in the ${this.name} collection.`, response);\n    }).catch(err => {\n      Log.error(`Failed to remove the entities in the ${this.name} collection.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Remove an entity in a collection. A promise will be returned that will be\n   * resolved with a count of the number of entities removed or rejected with an error.\n   *\n   * @param   {string}                id                                        Document Id\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   */\n  removeById(id, options = {}) {\n    if (!id) {\n      Log.warn('No id was provided to be removed.', id);\n      return Promise.resolve(null);\n    }\n\n    Log.debug(`Removing an entity in the ${this.name} collection with id = ${id}.`);\n\n    const request = new LocalRequest({\n      method: HttpMethod.DELETE,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/${id}`\n      }),\n      properties: options.properties,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute()\n      .then(response => this._sync(response.data.entities, options).then(() => response.data));\n\n    promise.then(response => {\n      Log.info(`Removed the entity in the ${this.name} collection with id = ${id}.`, response);\n    }).catch(err => {\n      Log.error(`Failed to remove the entity in the ${this.name} collection with id = ${id}.`, err);\n    });\n\n    return promise;\n  }\n\n  /**\n   * Pull items for a collection from the network to your local cache. A promise will be\n   * returned that will be resolved with the result of the pull or rejected with an error.\n   *\n   * @param   {Query}                 [query]                                   Query to pull a subset of items.\n   * @param   {Object}                options                                   Options\n   * @param   {Properties}            [options.properties]                      Custom properties to send with\n   *                                                                            the request.\n   * @param   {Number}                [options.timeout]                         Timeout for the request.\n   * @return  {Promise}                                                         Promise\n   */\n  pull(query, options = {}) {\n    const promise = this.syncCount(null, options).then(count => {\n      if (count > 0) {\n        throw new KinveyError('Unable to pull data. You must push the pending sync items first.',\n          'Call store.push() to push the pending sync items before you pull new data.');\n      }\n\n      return super.find(query, options);\n    }).then(result => result.networkPromise);\n    return promise;\n  }\n}\n"],"sourceRoot":"/source/"}