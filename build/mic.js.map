{"version":3,"sources":["mic.js"],"names":[],"mappings":"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","file":"mic.js","sourcesContent":["import Promise from 'babybird';\nimport { AuthType, HttpMethod, AuthorizationGrant } from './enums';\nimport { KinveyError } from './errors';\nimport { NetworkRequest } from './requests/network';\nimport { Client } from './client';\nimport { Popup } from './utils/popup';\nimport path from 'path';\nimport url from 'url';\nimport isString from 'lodash/isString';\nconst authPathname = process.env.KINVEY_MIC_AUTH_PATHNAME || '/oauth/auth';\nconst tokenPathname = process.env.KINVEY_MIC_TOKEN_PATHNAME || '/oauth/token';\n\n/**\n * @private\n */\nexport class MobileIdentityConnect {\n  constructor(client = Client.sharedInstance()) {\n    this.client = new Client({\n      protocol: process.env.KINVEY_MIC_PROTOCOL || 'https:',\n      host: process.env.KINVEY_MIC_HOST || 'auth.kinvey.com',\n      appKey: client.appKey,\n      appSecret: client.appSecret,\n      masterSecret: client.masterSecret,\n      encryptionKey: client.encryptionKey\n    });\n  }\n\n  static get identity() {\n    return process.env.KINVEY_MIC_IDENTITY || 'kinveyAuth';\n  }\n\n  login(redirectUri, authorizationGrant = AuthorizationGrant.AuthorizationCodeLoginPage, options = {}) {\n    const clientId = this.client.appKey;\n\n    const promise = Promise.resolve().then(() => {\n      if (authorizationGrant === AuthorizationGrant.AuthorizationCodeLoginPage) {\n        // Step 1: Request a code\n        return this.requestCodeWithPopup(clientId, redirectUri, options);\n      } else if (authorizationGrant === AuthorizationGrant.AuthorizationCodeAPI) {\n        // Step 1a: Request a temp login url\n        return this.requestTempLoginUrl(clientId, redirectUri, options)\n          .then(url => this.requestCodeWithUrl(url, clientId, redirectUri, options)); // Step 1b: Request a code\n      }\n\n      throw new KinveyError(`The authorization grant ${authorizationGrant} is unsupported. ` +\n        'Please use a supported authorization grant.');\n    }).then(code => this.requestToken(code, clientId, redirectUri, options)); // Step 3: Request a token\n\n    return promise;\n  }\n\n  requestTempLoginUrl(clientId, redirectUri, options = {}) {\n    let pathname = '/';\n\n    if (options.version) {\n      let version = options.version;\n\n      if (!isString(version)) {\n        version = String(version);\n      }\n\n      pathname = path.join(pathname, version.indexOf('v') === 0 ? version : `v${version}`);\n    }\n\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: path.join(pathname, authPathname)\n      }),\n      properties: options.properties,\n      data: {\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        response_type: 'code'\n      }\n    });\n    return request.execute().then(response => response.data.temp_login_uri);\n  }\n\n  requestCodeWithPopup(clientId, redirectUri, options = {}) {\n    const promise = Promise.resolve().then(() => {\n      let pathname = '/';\n\n      if (options.version) {\n        let version = options.version;\n\n        if (!isString(version)) {\n          version = String(version);\n        }\n\n        pathname = path.join(pathname, version.indexOf('v') === 0 ? version : `v${version}`);\n      }\n\n      const popup = new Popup(url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: path.join(pathname, authPathname),\n        query: {\n          client_id: clientId,\n          redirect_uri: redirectUri,\n          response_type: 'code'\n        }\n      }));\n      return popup.open();\n    }).then((popup) => {\n      const promise = new Promise((resolve, reject) => {\n        let redirected = false;\n\n        function loadHandler(loadedUrl) {\n          if (loadedUrl.indexOf(redirectUri) === 0) {\n            redirected = true;\n            popup.removeAllListeners();\n            popup.close();\n            resolve(url.parse(loadedUrl, true).query.code);\n          }\n        }\n\n        function closeHandler() {\n          popup.removeAllListeners();\n\n          if (!redirected) {\n            reject(new Error('Login has been cancelled.'));\n          }\n        }\n\n        popup.on('loaded', loadHandler);\n        popup.on('closed', closeHandler);\n      });\n      return promise;\n    });\n\n    return promise;\n  }\n\n  requestCodeWithUrl(loginUrl, clientId, redirectUri, options = {}) {\n    const promise = Promise.resolve().then(() => {\n      const request = new NetworkRequest({\n        method: HttpMethod.POST,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        url: loginUrl,\n        properties: options.properties,\n        data: {\n          client_id: clientId,\n          redirect_uri: redirectUri,\n          response_type: 'code',\n          username: options.username,\n          password: options.password\n        },\n        followRedirect: false\n      });\n      return request.execute();\n    }).then(response => {\n      const location = response.getHeader('location');\n\n      if (location) {\n        return url.parse(location, true).query.code;\n      }\n\n      throw new KinveyError(`Unable to authorize user with username ${options.username}.`);\n    });\n\n    return promise;\n  }\n\n  requestToken(code, clientId, redirectUri, options = {}) {\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      authType: AuthType.App,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: tokenPathname\n      }),\n      properties: options.properties,\n      data: {\n        grant_type: 'authorization_code',\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        code: code\n      }\n    });\n    request.automaticallyRefreshAuthToken = false;\n\n    const promise = request.execute().then(response => response.data);\n    return promise;\n  }\n\n  // refresh(token, options) {\n  //   const clientId = this.client.appKey;\n  //   return this.refreshToken(clientId, token, options);\n  // }\n\n  // refreshToken(clientId, token, options = {}) {\n  //   const request = new NetworkRequest({\n  //     method: HttpMethod.POST,\n  //     headers: {\n  //       'Content-Type': 'application/x-www-form-urlencoded'\n  //     },\n  //     authType: AuthType.App,\n  //     url: url.format({\n  //       protocol: this.client.protocol,\n  //       host: this.client.host,\n  //       pathname: tokenPathname\n  //     }),\n  //     properties: options.properties,\n  //     data: {\n  //       grant_type: 'refresh_token',\n  //       client_id: clientId,\n  //       redirect_uri: token.redirect_uri,\n  //       refresh_token: token.refresh_token\n  //     }\n  //   });\n  //   request.automaticallyRefreshAuthToken = false;\n\n  //   const promise = request.execute().then(response => {\n  //     return response.data;\n  //   });\n\n  //   return promise;\n  // }\n}\n"],"sourceRoot":"/source/"}