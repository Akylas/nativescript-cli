{"version":3,"sources":["command.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AACA,IAAM,eAAe,QAAQ,GAAR,CAAY,oBAAZ,IAAoC,KAApC;;;;;;IAKR;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAoBI,SAAS,MAAoB;UAAd,gEAAU,kBAAI;;AAC1C,UAAM,SAAS,eAAO,cAAP,EAAT,CADoC;;AAG1C,UAAI,CAAC,OAAD,EAAU;AACZ,cAAM,wBAAgB,wBAAhB,CAAN,CADY;OAAd;;AAIA,UAAI,CAAC,wBAAS,OAAT,CAAD,EAAoB;AACtB,cAAM,wBAAgB,2BAAhB,CAAN,CADsB;OAAxB;;AAIA,aAAO,OAAO,qBAAP,CAA6B;AAClC,gBAAQ,kBAAW,IAAX;AACR,wBAAc,qBAAgB,QAAQ,MAAR,CAAe,MAAf,gBAAgC,OAA9D;AACA,oBAAY,QAAQ,UAAR;AACZ,cAAM,OAAO,WAAP,EAAN;AACA,cAAM,IAAN;AACA,iBAAS,QAAQ,OAAR;OANJ,EAOJ,IAPI,CAOC;eAAY,SAAS,IAAT;OAAZ,CAPR,CAX0C;;;;SApBjC","file":"command.js","sourcesContent":["import { Client } from './client';\nimport { HttpMethod } from './enums';\nimport { KinveyError } from './errors';\nimport isString from 'lodash/isString';\nconst rpcNamespace = process.env.KINVEY_RPC_NAMESPACE || 'rpc';\n\n/**\n * Executes a custom command.\n */\nexport class Command {\n  /**\n   * Execute a custom command. A promise will be returned that will be resolved\n   * with the result of the command or rejected with an error.\n   *\n   * @param   {String}          command                           Command to execute.\n   * @param   {Object}          [args]                            Command arguments\n   * @param   {Object}          [options]                         Options\n   * @param   {Properties}      [options.properties]              Custom properties to send with\n   *                                                              the request.\n   * @param   {Number}          [options.timeout]                 Timeout for the request.\n   * @return  {Promise}                                           Promise\n   *\n   * @example\n   * var promise = Kinvey.Command.execute('myCustomCommand').then(function(data) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  static execute(command, args, options = {}) {\n    const client = Client.sharedInstance();\n\n    if (!command) {\n      throw new KinveyError('A command is required.');\n    }\n\n    if (!isString(command)) {\n      throw new KinveyError('Command must be a string.');\n    }\n\n    return client.executeNetworkRequest({\n      method: HttpMethod.POST,\n      pathname: `/${rpcNamespace}/${options.client.appKey}/custom/${command}`,\n      properties: options.properties,\n      auth: client.defaultAuth(),\n      data: args,\n      timeout: options.timeout\n    }).then(response => response.data);\n  }\n}\n"],"sourceRoot":"/source/"}