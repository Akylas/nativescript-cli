{"version":3,"sources":["kinvey.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AACA,IAAM,mBAAmB,QAAQ,GAAR,CAAY,0BAAZ,IAA0C,SAA1C;;IAEnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAsBQ,SAAS;AACnB,UAAM,SAAS,eAAO,IAAP,CAAY,OAAZ,CAAT,CADa;AAEnB,aAAO,MAAP,CAFmB;;;;;;;;;;;2BAUyB;UAAlC,+DAAS,eAAO,cAAP,kBAAyB;;AAC5C,UAAM,UAAU,4BAAmB;AACjC,gBAAQ,kBAAW,GAAX;AACR,kBAAU,gBAAS,GAAT;AACV,aAAK,cAAI,MAAJ,CAAW;AACd,oBAAU,OAAO,QAAP;AACV,gBAAM,OAAO,IAAP;AACN,oBAAa,yBAAoB,OAAO,MAAP;SAH9B,CAAL;OAHc,CAAV,CADsC;;AAW5C,UAAM,UAAU,QAAQ,OAAR,GAAkB,IAAlB,CAAuB;eAAY,SAAS,IAAT;OAAZ,CAAjC,CAXsC;AAY5C,aAAO,OAAP,CAZ4C;;;;SAhC1C;;;AAgDN,OAAO,WAAP;AACA,OAAO,kBAAP;AACA,OAAO,OAAP;AACA,OAAO,SAAP;AACA,OAAO,aAAP;AACA,OAAO,GAAP;AACA,OAAO,QAAP;AACA,OAAO,OAAP;AACA,OAAO,KAAP;AACA,OAAO,cAAP;AACA,OAAO,IAAP;AACA,OAAO,IAAP;QACS","file":"kinvey.js","sourcesContent":["import Promise from 'babybird';\nimport { Aggregation } from './aggregation';\nimport { Client } from './client';\nimport { Command } from './command';\nimport { Log } from './log';\nimport { Metadata } from './metadata';\nimport { Query } from './query';\nimport { DataStore } from './stores/datastore';\nimport { Sync } from './sync';\nimport { User } from './user';\nimport { AuthType, AuthorizationGrant, SocialIdentity, HttpMethod, DataStoreType } from './enums';\nimport { NetworkRequest } from './requests/network';\nimport url from 'url';\nconst appdataNamespace = process.env.KINVEY_DATASTORE_NAMESPACE || 'appdata';\n\nclass Kinvey {\n  /**\n   * Initializes the library with your app's information.\n   *\n   * @param   {Object}        options                         Options\n   * @param   {string}        options.appKey                  My app key\n   * @param   {string}        [options.appSecret]             My app secret\n   * @param   {string}        [options.masterSecret]          My app's master secret\n   * @param   {string}        [options.encryptionKey]         My app's encryption key\n   * @param   {string}        [options.protocol]              The protocol of the client.\n   * @param   {string}        [options.host]                  The host of the client.\n   * @return  {Client}                                        An instance of Client.\n   *\n   * @throws  {KinveyError}  If an `options.appKey` is not provided.\n   * @throws  {KinveyError}  If neither an `options.appSecret` or `options.masterSecret` is provided.\n   *\n   * @example\n   * var client = Kinvey.init({\n   *   appKey: 'appKey',\n   *   appSecret: 'appSecret'\n   * });\n   */\n  static init(options) {\n    const client = Client.init(options);\n    return client;\n  }\n\n  /**\n   * Pings the Kinvey service.\n   *\n   * @returns {Promise} The response.\n   */\n  static ping(client = Client.sharedInstance()) {\n    const request = new NetworkRequest({\n      method: HttpMethod.GET,\n      authType: AuthType.All,\n      url: url.format({\n        protocol: client.protocol,\n        host: client.host,\n        pathname: `${appdataNamespace}/${client.appKey}`\n      })\n    });\n\n    const promise = request.execute().then(response => response.data);\n    return promise;\n  }\n}\n\nKinvey.Aggregation = Aggregation;\nKinvey.AuthorizationGrant = AuthorizationGrant;\nKinvey.Command = Command;\nKinvey.DataStore = DataStore;\nKinvey.DataStoreType = DataStoreType;\nKinvey.Log = Log;\nKinvey.Metadata = Metadata;\nKinvey.Promise = Promise;\nKinvey.Query = Query;\nKinvey.SocialIdentity = SocialIdentity;\nKinvey.Sync = Sync;\nKinvey.User = User;\nexport { Kinvey };\n"],"sourceRoot":"/source/"}