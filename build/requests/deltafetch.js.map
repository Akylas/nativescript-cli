{"version":3,"sources":["requests/deltafetch.js"],"names":[],"mappings":"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","file":"requests/deltafetch.js","sourcesContent":["import Promise from 'babybird';\nimport { KinveyRequest } from './request';\nimport { LocalRequest } from './local';\nimport { NetworkRequest } from './network';\nimport { Response } from './response';\nimport { HttpMethod, StatusCode } from '../enums';\nimport { NotFoundError } from '../errors';\nimport { Query } from '../query';\nimport keyBy from 'lodash/keyBy';\nimport reduce from 'lodash/reduce';\nimport result from 'lodash/result';\nimport values from 'lodash/values';\nimport forEach from 'lodash/forEach';\nconst idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';\nconst kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';\nconst lmtAttribute = process.env.KINVEY_LMT_ATTRIBUTE || 'lmt';\nconst maxIdsPerRequest = process.env.KINVEY_MAX_IDS || 200;\n\n/**\n * @private\n */\nexport class DeltaFetchRequest extends KinveyRequest {\n  execute() {\n    const promise = super.execute().then(() => {\n      if (this.method !== HttpMethod.GET) {\n        throw new Error('Invalid http method. Http GET requests are only supported by DeltaFetchRequests.');\n      }\n\n      const localRequest = new LocalRequest({\n        method: HttpMethod.GET,\n        url: this.url,\n        headers: this.headers,\n        query: this.query,\n        timeout: this.timeout,\n        client: this.client\n      });\n      return localRequest.execute();\n    }).catch(error => {\n      if (error instanceof NotFoundError) {\n        return new Response({\n          statusCode: StatusCode.Ok,\n          data: []\n        });\n      }\n\n      throw error;\n    }).then(cacheResponse => {\n      if (cacheResponse.data.length > 0) {\n        const cacheDocuments = keyBy(cacheResponse.data, idAttribute);\n        const query = new Query(result(this.query, 'toJSON', this.query));\n        query.fields([idAttribute, kmdAttribute]);\n        const networkRequest = new NetworkRequest({\n          method: HttpMethod.GET,\n          url: this.url,\n          headers: this.headers,\n          auth: this.auth,\n          query: query,\n          timeout: this.timeout,\n          client: this.client\n        });\n\n        return networkRequest.execute().then(networkResponse => {\n          const networkDocuments = keyBy(networkResponse.data, idAttribute);\n          const deltaSet = networkDocuments;\n          const cacheDocumentIds = Object.keys(cacheDocuments);\n\n          forEach(cacheDocumentIds, id => {\n            const cacheDocument = cacheDocuments[id];\n            const networkDocument = networkDocuments[id];\n\n            if (networkDocument) {\n              if (networkDocument[kmdAttribute] && cacheDocument[kmdAttribute]\n                  && networkDocument[kmdAttribute][lmtAttribute] === cacheDocument[kmdAttribute][lmtAttribute]) {\n                delete deltaSet[id];\n              } else {\n                delete cacheDocuments[id];\n              }\n            } else {\n              delete cacheDocuments[id];\n            }\n          });\n\n          const deltaSetIds = Object.keys(deltaSet);\n          const promises = [];\n          let i = 0;\n\n          while (i < deltaSetIds.length) {\n            const query = new Query(result(this.query, 'toJSON', this.query));\n            const ids = deltaSetIds.slice(i, deltaSetIds.length > maxIdsPerRequest + i ?\n                                             maxIdsPerRequest : deltaSetIds.length);\n            query.contains(idAttribute, ids);\n            const networkRequest = new NetworkRequest({\n              method: HttpMethod.GET,\n              url: this.url,\n              headers: this.headers,\n              auth: this.auth,\n              query: query,\n              timeout: this.timeout,\n              client: this.client\n            });\n\n            const promise = networkRequest.execute();\n            promises.push(promise);\n            i += maxIdsPerRequest;\n          }\n\n          return Promise.all(promises).then(responses => {\n            const initialResponse = new Response({\n              statusCode: StatusCode.Ok,\n              data: []\n            });\n            return reduce(responses, (result, response) => {\n              if (response.isSuccess()) {\n                result.addHeaders(response.headers);\n                result.data = result.data.concat(response.data);\n              }\n\n              return result;\n            }, initialResponse);\n          }).then(response => {\n            response.data = response.data.concat(values(cacheDocuments));\n\n            if (this.query) {\n              const query = new Query(result(this.query, 'toJSON', this.query));\n              query.skip(0).limit(0);\n              response.data = query._process(response.data);\n            }\n\n            return response;\n          });\n        });\n      }\n\n      const networkRequest = new NetworkRequest({\n        method: HttpMethod.GET,\n        url: this.url,\n        headers: this.headers,\n        auth: this.auth,\n        query: this.query,\n        timeout: this.timeout,\n        client: this.client\n      });\n      return networkRequest.execute();\n    });\n\n    return promise;\n  }\n}\n"],"sourceRoot":"/source/"}