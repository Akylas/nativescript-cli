{"version":3,"sources":["requests/network.js"],"names":[],"mappings":"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","file":"requests/network.js","sourcesContent":["import { KinveyRequest } from './request';\nimport { NetworkRack } from '../rack/rack';\nimport { NoResponseError, InvalidCredentialsError } from '../errors';\nimport { HttpMethod, AuthType } from '../enums';\nimport { Response } from './response';\nimport url from 'url';\nconst socialIdentityAttribute = process.env.KINVEY_SOCIAL_IDENTITY_ATTRIBUTE || '_socialIdentity';\nconst micIdentity = process.env.KINVEY_MIC_IDENTITY || 'kinveyAuth';\nconst tokenPathname = process.env.KINVEY_MIC_TOKEN_PATHNAME || '/oauth/token';\nconst usersNamespace = process.env.KINVEY_USERS_NAMESPACE || 'user';\n\n/**\n * @private\n */\nexport class NetworkRequest extends KinveyRequest {\n  constructor(options) {\n    super(options);\n    this.rack = NetworkRack.sharedInstance();\n    this.automaticallyRefreshAuthToken = true;\n  }\n\n  execute() {\n    const promise = super.execute().then(() => this.rack.execute(this)).then(response => {\n      if (!response) {\n        throw new NoResponseError();\n      }\n\n      if (!(response instanceof Response)) {\n        return new Response({\n          statusCode: response.statusCode,\n          headers: response.headers,\n          data: response.data\n        });\n      }\n\n      return response;\n    }).then(response => {\n      if (!response.isSuccess()) {\n        throw response.error;\n      }\n\n      return response;\n    }).catch(error => {\n      if (error instanceof InvalidCredentialsError && this.automaticallyRefreshAuthToken) {\n        this.automaticallyRefreshAuthToken = false;\n        const activeSocialIdentity = this.client.getActiveSocialIdentity();\n\n        // Refresh MIC Auth Token\n        if (activeSocialIdentity && activeSocialIdentity.identity === micIdentity) {\n          // Refresh the token\n          const token = activeSocialIdentity.token;\n          const request = new NetworkRequest({\n            method: HttpMethod.POST,\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            authType: AuthType.App,\n            url: url.format({\n              protocol: activeSocialIdentity.client.protocol,\n              host: activeSocialIdentity.client.host,\n              pathname: tokenPathname\n            }),\n            properties: this.properties,\n            data: {\n              grant_type: 'refresh_token',\n              client_id: token.audience,\n              redirect_uri: activeSocialIdentity.redirectUri,\n              refresh_token: token.refresh_token\n            }\n          });\n          request.automaticallyRefreshAuthToken = false;\n\n          return request.execute().then(response => response.data).then(token => {\n            // Login the user with the new token\n            const activeUserData = this.client.getActiveUserData();\n            const socialIdentity = activeUserData[socialIdentityAttribute];\n            socialIdentity[activeSocialIdentity.identity] = token;\n            activeUserData[socialIdentityAttribute] = socialIdentity;\n\n            const request = new NetworkRequest({\n              method: HttpMethod.POST,\n              authType: AuthType.App,\n              url: url.format({\n                protocol: this.client.protocol,\n                host: this.client.host,\n                pathname: `/${usersNamespace}/${this.client.appKey}/login`\n              }),\n              properties: this.properties,\n              data: activeUserData,\n              timeout: this.timeout,\n              client: this.client\n            });\n            request.automaticallyRefreshAuthToken = false;\n            return request.execute();\n          }).then(response => {\n            // Store the new data\n            this.client.setActiveUserData(response.data);\n            this.client.setActiveSocialIdentity({\n              identity: activeSocialIdentity.identity,\n              redirectUri: activeSocialIdentity.redirectUri,\n              token: response.data[socialIdentityAttribute][activeSocialIdentity.identity],\n              client: activeSocialIdentity.client\n            });\n\n            // Execute the original request\n            return this.execute();\n          }).catch(() => {\n            throw error;\n          });\n        }\n      }\n\n      throw error;\n    }).then(response => {\n      this.automaticallyRefreshAuthToken = true;\n      return response;\n    }).catch(error => {\n      this.automaticallyRefreshAuthToken = true;\n      throw error;\n    });\n\n    return promise;\n  }\n\n  cancel() {\n    const promise = super.cancel().then(() => this.rack.cancel());\n    return promise;\n  }\n}\n"],"sourceRoot":"/source/"}