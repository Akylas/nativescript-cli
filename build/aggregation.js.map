{"version":3,"sources":["aggregation.js"],"names":[],"mappings":"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","file":"aggregation.js","sourcesContent":["import { KinveyError } from './errors';\nimport { Query } from './query';\nimport result from 'lodash/result';\nimport assign from 'lodash/assign';\nimport forEach from 'lodash/forEach';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport isFunction from 'lodash/isFunction';\n\nexport class Aggregation {\n  constructor(options) {\n    options = assign({\n      query: null,\n      initial: {},\n      key: {},\n      reduce: function () {}.toString()\n    }, options);\n\n    this.query(options.query);\n    this._initial = options.initial;\n    this._key = options.key;\n    this._reduce = options.reduce;\n  }\n\n  by(field) {\n    this._key[field] = true;\n    return this;\n  }\n\n  initial(objectOrKey, value) {\n    if (typeof value === 'undefined' && !isObject(objectOrKey)) {\n      throw new KinveyError('objectOrKey argument must be an Object.');\n    }\n\n    if (isObject(objectOrKey)) {\n      this._initial = objectOrKey;\n    } else {\n      this._initial[objectOrKey] = value;\n    }\n\n    return this;\n  }\n\n  query(query) {\n    if (query && !(query instanceof Query)) {\n      query = new Query(result(query, 'toJSON', query));\n    }\n\n    this._query = query;\n    return this;\n  }\n\n  process(entities = []) {\n    const groups = {};\n    const response = [];\n    const aggregation = this.toJSON();\n    const reduce = aggregation.reduce.replace(/function[\\s\\S]*?\\([\\s\\S]*?\\)/, '');\n    aggregation.reduce = new Function(['doc', 'out'], reduce); // eslint-disable-line no-new-func\n\n    if (this._query) {\n      entities = this._query.process(entities);\n    }\n\n    forEach(entities, entity => {\n      const group = {};\n      const entityNames = Object.keys(entity);\n\n      forEach(entityNames, name => {\n        group[name] = entity[name];\n      });\n\n      const key = JSON.stringify(group);\n      if (!groups[key]) {\n        groups[key] = group;\n        const attributes = Object.keys(aggregation.initial);\n\n        forEach(attributes, attr => {\n          groups[key][attr] = aggregation.initial[attr];\n        });\n      }\n\n      aggregation.reduce(entity, groups[key]);\n    });\n\n    const segments = Object.keys(groups);\n    forEach(segments, segment => {\n      response.push(groups[segment]);\n    });\n\n    return response;\n  }\n\n  reduce(fn) {\n    if (isFunction(fn)) {\n      fn = fn.toString();\n    }\n\n    if (!isString(fn)) {\n      throw new KinveyError('fn argument must be of type function or string.');\n    }\n\n    this._reduce = fn;\n    return this;\n  }\n\n  toJSON() {\n    const json = {\n      key: this._key,\n      initial: this._initial,\n      reduce: this._reduce,\n      condition: this._query ? this._query.toJSON().filter : {},\n      query: this._query ? this._query.toJSON() : null\n    };\n\n    return json;\n  }\n\n  static count(field = '') {\n    const aggregation = new Aggregation();\n\n    if (field) {\n      aggregation.by(field);\n    }\n\n    aggregation.initial({ result: 0 });\n    aggregation.reduce((doc, out) => {\n      out.result += 1;\n      return out;\n    });\n    return aggregation;\n  }\n\n  static sum(field = '') {\n    field = field.replace('\\'', '\\\\\\'');\n\n    const aggregation = new Aggregation();\n    aggregation.initial({ result: 0 });\n    aggregation.reduce('function(doc, out) { ' +\n      ` out.result += doc[\"${field}\"]; ` +\n      '}'\n    );\n    return aggregation;\n  }\n\n  static min(field = '') {\n    field = field.replace('\\'', '\\\\\\'');\n\n    const aggregation = new Aggregation();\n    aggregation.initial({ result: Infinity });\n    aggregation.reduce('function(doc, out) { ' +\n      ` out.result = Math.min(out.result, doc[\"${field}\"]); ` +\n      '}'\n    );\n    return aggregation;\n  }\n\n  static max(field = '') {\n    field = field.replace('\\'', '\\\\\\'');\n\n    const aggregation = new Aggregation();\n    aggregation.initial({ result: -Infinity });\n    aggregation.reduce('function(doc, out) { ' +\n      ` out.result = Math.max(out.result, doc[\"${field}\"]); ` +\n      '}'\n    );\n    return aggregation;\n  }\n\n  static average(field = '') {\n    field = field.replace('\\'', '\\\\\\'');\n\n    const aggregation = new Aggregation();\n    aggregation.initial({ count: 0, result: 0 });\n    aggregation.reduce('function(doc, out) { ' +\n      ` out.result = (out.result * out.count + doc[\"${field}\"]) / (out.count + 1);` +\n      ' out.count += 1;' +\n      '}'\n    );\n    return aggregation;\n  }\n}\n"],"sourceRoot":"/source/"}