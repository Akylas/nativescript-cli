{"version":3,"sources":["query.js"],"names":[],"mappings":"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","file":"query.js","sourcesContent":["import { nested } from './utils/object';\nimport sift from 'sift';\nimport assign from 'lodash/assign';\nimport isArray from 'lodash/isArray';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport isObject from 'lodash/isObject';\nimport isRegExp from 'lodash/isRegExp';\nimport forEach from 'lodash/forEach';\n\nexport class Query {\n  constructor(options) {\n    options = assign({\n      fields: [],\n      filter: {},\n      sort: {},\n      limit: null,\n      skip: 0\n    }, options);\n\n    /**\n     * Fields to select.\n     *\n     * @type {Array}\n     */\n    this._fields = options.fields;\n\n    /**\n     * The MongoDB query.\n     *\n     * @type {Object}\n     */\n    this._filter = options.filter;\n\n    /**\n     * The sorting order.\n     *\n     * @type {Object}\n     */\n    this._sort = options.sort;\n\n    /**\n     * Number of documents to select.\n     *\n     * @type {?Number}\n     */\n    this._limit = options.limit;\n\n    /**\n     * Number of documents to skip from the start.\n     *\n     * @type {Number}\n     */\n    this._skip = options.skip;\n\n    /**\n     * Maintain reference to the parent query in case the query is part of a\n     * join.\n     *\n     * @type {?PrivateQuery}\n     */\n    this.parent = null;\n  }\n\n  /**\n   * Adds an equal to filter to the query. Requires `field` to equal `value`.\n   * Any existing filters on `field` will be discarded.\n   * http://docs.mongodb.org/manual/reference/operators/#comparison\n   *\n   * @param   {String}        field     Field.\n   * @param   {*}             value     Value.\n   * @returns {Query}                   The query.\n   */\n  equalTo(field, value) {\n    this._filter[field] = value;\n    return this;\n  }\n\n  /**\n   * Adds a contains filter to the query. Requires `field` to contain at least\n   * one of the members of `list`.\n   * http://docs.mongodb.org/manual/reference/operator/in/\n   *\n   * @param   {String}        field     Field.\n   * @param   {Array}         values    List of values.\n   * @throws  {Error}                   `values` must be of type: `Array`.\n   * @returns {Query}                   The query.\n   */\n  contains(field, values) {\n    if (!isArray(values)) {\n      values = [values];\n    }\n\n    return this.addFilter(field, '$in', values);\n  }\n\n  /**\n   * Adds a contains all filter to the query. Requires `field` to contain all\n   * members of `list`.\n   * http://docs.mongodb.org/manual/reference/operator/all/\n   *\n   * @param   {String}  field     Field.\n   * @param   {Array}   values    List of values.\n   * @throws  {Error}             `values` must be of type: `Array`.\n   * @returns {Query}             The query.\n   */\n  containsAll(field, values) {\n    if (!isArray(values)) {\n      values = [values];\n    }\n\n    return this.addFilter(field, '$all', values);\n  }\n\n  /**\n   * Adds a greater than filter to the query. Requires `field` to be greater\n   * than `value`.\n   * http://docs.mongodb.org/manual/reference/operator/gt/\n   *\n   * @param   {String}          field     Field.\n   * @param   {Number|String}   value     Value.\n   * @throws  {Error}                     `value` must be of type: `number` or `string`.\n   * @returns {Query}                     The query.\n   */\n  greaterThan(field, value) {\n    if (!isNumber(value) && !isString(value)) {\n      throw new Error('You must supply a number or string.');\n    }\n\n    return this.addFilter(field, '$gt', value);\n  }\n\n  greaterThanOrEqualTo(field, value) {\n    if (!isNumber(value) && !isString(value)) {\n      throw new Error('You must supply a number or string.');\n    }\n\n    return this.addFilter(field, '$gte', value);\n  }\n\n  lessThan(field, value) {\n    if (!isNumber(value) && !isString(value)) {\n      throw new Error('You must supply a number or string.');\n    }\n\n    return this.addFilter(field, '$lt', value);\n  }\n\n  lessThanOrEqualTo(field, value) {\n    if (!isNumber(value) && !isString(value)) {\n      throw new Error('You must supply a number or string.');\n    }\n\n    return this.addFilter(field, '$lte', value);\n  }\n\n  notEqualTo(field, value) {\n    return this.addFilter(field, '$ne', value);\n  }\n\n  notContainedIn(field, values) {\n    if (!isArray(values)) {\n      values = [values];\n    }\n\n    return this.addFilter(field, '$nin', values);\n  }\n\n  and(...args) {\n    return this.join('$and', Array.prototype.slice.call(args));\n  }\n\n  nor(...args) {\n    if (this.parent && this.parent.filter.$and) {\n      return this.parent.nor.apply(this.parent, args);\n    }\n\n    return this.join('$nor', Array.prototype.slice.call(args));\n  }\n\n  or(...args) {\n    if (this.parent) {\n      return this.parent.or.apply(this.parent, args);\n    }\n\n    return this.join('$or', Array.prototype.slice.call(args));\n  }\n\n  exists(field, flag) {\n    flag = typeof flag === 'undefined' ? true : flag || false;\n    return this.addFilter(field, '$exists', flag);\n  }\n\n  mod(field, divisor, remainder) {\n    remainder = remainder || 0;\n\n    if (isString(divisor)) {\n      divisor = parseFloat(divisor);\n    }\n\n    if (isString(remainder)) {\n      remainder = parseFloat(remainder);\n    }\n\n    if (!isNumber(divisor)) {\n      throw new Error('Divisor must be a number.');\n    }\n\n    if (!isNumber(remainder)) {\n      throw new Error('Remainder must be a number.');\n    }\n\n    return this.addFilter(field, '$mod', [divisor, remainder]);\n  }\n\n  matches(field, regExp, options) {\n    options = options || {};\n\n    if (!isRegExp(regExp)) {\n      regExp = new RegExp(regExp);\n    }\n\n    if ((regExp.ignoreCase || options.ignoreCase) && options.ignoreCase !== false) {\n      throw new Error('ignoreCase glag is not supported.');\n    }\n\n    if (regExp.source.indexOf('^') !== 0) {\n      throw new Error('regExp must have `^` at the beginning of the expression ' +\n        'to make it an anchored expression.');\n    }\n\n    const flags = [];\n\n    if ((regExp.multiline || options.multiline) && options.multiline !== false) {\n      flags.push('m');\n    }\n\n    if (options.extended) {\n      flags.push('x');\n    }\n\n    if (options.dotMatchesAll) {\n      flags.push('s');\n    }\n\n    const result = this.addFilter(field, '$regex', regExp.source);\n\n    if (flags.length) {\n      this.addFilter(field, '$options', flags.join(''));\n    }\n\n    return result;\n  }\n\n  near(field, coord, maxDistance) {\n    if (!isArray(coord) || !coord[0] || !coord[1]) {\n      throw new Error('coord argument must be of type: [number, number]');\n    }\n\n    coord[0] = parseFloat(coord[0]);\n    coord[1] = parseFloat(coord[1]);\n\n    const result = this.addFilter(field, '$nearSphere', [coord[0], coord[1]]);\n\n    if (maxDistance) {\n      this.addFilter(field, '$maxDistance', maxDistance);\n    }\n\n    return result;\n  }\n\n  withinBox(field, bottomLeftCoord, upperRightCoord) {\n    if (!isArray(bottomLeftCoord) || !bottomLeftCoord[0] || !bottomLeftCoord[1]) {\n      throw new Error('bottomLeftCoord argument must be of type: [number, number]');\n    }\n\n    if (!isArray(upperRightCoord) || !upperRightCoord[0] || !upperRightCoord[1]) {\n      throw new Error('upperRightCoord argument must be of type: [number, number]');\n    }\n\n    bottomLeftCoord[0] = parseFloat(bottomLeftCoord[0]);\n    bottomLeftCoord[1] = parseFloat(bottomLeftCoord[1]);\n    upperRightCoord[0] = parseFloat(upperRightCoord[0]);\n    upperRightCoord[1] = parseFloat(upperRightCoord[1]);\n\n    const coords = [\n      [bottomLeftCoord[0], bottomLeftCoord[1]],\n      [upperRightCoord[0], upperRightCoord[1]]\n    ];\n    return this.addFilter(field, '$within', { $box: coords });\n  }\n\n  withinPolygon(field, coords) {\n    if (!isArray(coords) || coords.length > 3) {\n      throw new Error('coords argument must be of type: [[number, number]]');\n    }\n\n    coords = coords.map(coord => {\n      if (!coord[0] || !coord[1]) {\n        throw new Error('coords argument must be of type: [number, number]');\n      }\n\n      return [parseFloat(coord[0]), parseFloat(coord[1])];\n    });\n\n    return this.addFilter(field, '$within', { $polygon: coords });\n  }\n\n  size(field, size) {\n    if (isString(size)) {\n      size = parseFloat(size);\n    }\n\n    if (!isNumber(size)) {\n      throw new Error('size argument must be a number');\n    }\n\n    return this.addFilter(field, '$size', size);\n  }\n\n  fields(fields) {\n    fields = fields || [];\n\n    if (!isArray(fields)) {\n      throw new Error('fields argument must an Array.');\n    }\n\n    if (this.parent) {\n      this.parent.fields(fields);\n    } else {\n      this._fields = fields;\n    }\n\n    return this;\n  }\n\n  limit(limit) {\n    if (isString(limit)) {\n      limit = parseFloat(limit);\n    }\n\n    if (limit && !isNumber(limit)) {\n      throw new Error('limit argument must be of type: number.');\n    }\n\n    if (this._parent) {\n      this.parent.limit(limit);\n    } else {\n      this._limit = limit;\n    }\n\n    return this;\n  }\n\n  skip(skip) {\n    if (isString(skip)) {\n      skip = parseFloat(skip);\n    }\n\n    if (!isNumber(skip)) {\n      throw new Error('skip argument must be of type: number.');\n    }\n\n    if (this.parent) {\n      this.parent.skip(skip);\n    } else {\n      this._skip = skip;\n    }\n\n    return this;\n  }\n\n  ascending(field) {\n    if (this.parent) {\n      this.parent.ascending(field);\n    } else {\n      this._sort[field] = 1;\n    }\n\n    return this;\n  }\n\n  descending(field) {\n    if (this.parent) {\n      this.parent.descending(field);\n    } else {\n      this._sort[field] = -1;\n    }\n\n    return this;\n  }\n\n  sort(sort) {\n    if (sort && !isObject(sort)) {\n      throw new Error('sort argument must be of type: Object.');\n    }\n\n    if (this.parent) {\n      this.parent.sort(sort);\n    } else {\n      this._sort = sort || {};\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds a filter to the query.\n   *\n   * @param   {String}          field       Field.\n   * @param   {String}          condition   Condition.\n   * @param   {*}               value       Value.\n   * @returns {PrivateQuery}                The query.\n   */\n  addFilter(field, condition, values) {\n    if (!isObject(this._filter[field])) {\n      this._filter[field] = {};\n    }\n\n    this._filter[field][condition] = values;\n    return this;\n  }\n\n  /**\n   * Joins the current query with another query using an operator.\n   *\n   * @param   {String}                    operator    Operator.\n   * @param   {PrivateQuery[]|Object[]}   queries     Queries.\n   * @throws  {Error}                                `query` must be of type: `Kinvey.Query[]` or `Object[]`.\n   * @returns {PrivateQuery}                          The query.\n   */\n  join(operator, queries) {\n    let _this = this;\n    const currentQuery = {};\n\n    // Cast, validate, and parse arguments. If `queries` are supplied, obtain\n    // the `filter` for joining. The eventual return function will be the\n    // current query.\n    queries = queries.map(query => {\n      if (!(query instanceof Query)) {\n        if (isObject(query)) {\n          query = new Query(query);\n        } else {\n          throw new Error('query argument must be of type: Kinvey.Query[] or Object[].');\n        }\n      }\n\n      return query.toJSON().filter;\n    });\n\n    // If there are no `queries` supplied, create a new (empty) `Query`.\n    // This query is the right-hand side of the join expression, and will be\n    // returned to allow for a fluent interface.\n    if (queries.length === 0) {\n      _this = new Query();\n      queries = [_this.toJSON().filter];\n      _this.parent = this; // Required for operator precedence and `toJSON`.\n    }\n\n    // Join operators operate on the top-level of `filter`. Since the `toJSON`\n    // magic requires `filter` to be passed by reference, we cannot simply re-\n    // assign `filter`. Instead, empty it without losing the reference.\n    const members = Object.keys(this._filter);\n    forEach(members, member => {\n      currentQuery[member] = this._filter[member];\n      delete this._filter[member];\n    });\n\n    // `currentQuery` is the left-hand side query. Join with `queries`.\n    this._filter[operator] = [currentQuery].concat(queries);\n\n    // Return the current query if there are `queries`, and the new (empty)\n    // `PrivateQuery` otherwise.\n    return _this;\n  }\n\n  /**\n   * Processes the data by applying fields, sort, limit, and skip.\n   *\n   * @param   {Array}   data    The raw data.\n   * @throws  {Error}               `data` must be of type: `Array`.\n   * @returns {Array}               The processed data.\n   */\n  _process(data) {\n    if (data) {\n      // Validate arguments.\n      if (!isArray(data)) {\n        throw new Error('data argument must be of type: Array.');\n      }\n\n      // Apply the query\n      const json = this.toJSON();\n      data = sift(json.filter, data);\n\n      // Remove fields\n      if (json.fields && json.fields.length > 0) {\n        data = data.map((item) => {\n          const keys = Object.keys(item);\n          forEach(keys, key => {\n            if (json.fields.indexOf(key) === -1) {\n              delete item[key];\n            }\n          });\n\n          return item;\n        });\n      }\n\n      // Sorting.\n      data = data.sort((a, b) => {\n        const fields = Object.keys(json.sort);\n        forEach(fields, field => {\n          // Find field in objects.\n          const aField = nested(a, field);\n          const bField = nested(b, field);\n\n          // Elements which do not contain the field should always be sorted\n          // lower.\n          if (aField && !bField) {\n            return -1;\n          }\n\n          if (bField && !aField) {\n            return 1;\n          }\n\n          // Sort on the current field. The modifier adjusts the sorting order\n          // (ascending (-1), or descending(1)). If the fields are equal,\n          // continue sorting based on the next field (if any).\n          if (aField !== bField) {\n            const modifier = json.sort[field]; // 1 or -1.\n            return (aField < bField ? -1 : 1) * modifier;\n          }\n\n          return 0;\n        });\n\n        return 0;\n      });\n\n      // Limit and skip.\n      if (json.limit) {\n        return data.slice(json.skip, json.skip + json.limit);\n      }\n\n      return data.slice(json.skip);\n    }\n\n    return data;\n  }\n\n  /**\n   * Returns JSON representation of the query.\n   *\n   * @returns {Object} JSON object-literal.\n   */\n  toJSON() {\n    if (this.parent) {\n      return this.parent.toJSON();\n    }\n\n    // Return set of parameters.\n    const json = {\n      fields: this._fields,\n      filter: this._filter,\n      sort: this._sort,\n      skip: this._skip,\n      limit: this._limit\n    };\n\n    return json;\n  }\n}\n"],"sourceRoot":"/source/"}