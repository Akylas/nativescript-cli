{"version":3,"sources":["rack/middleware/cache.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;;;IAKa;;;AACX,WADW,eACX,GAA0G;QAA9F,iEAAW,CAAC,cAAU,SAAV,EAAqB,cAAU,MAAV,EAAkB,cAAU,YAAV,EAAwB,cAAU,MAAV,iBAAmB;;0BAD/F,iBAC+F;;uEAD/F,4BAEH,4BADkG;;AAExG,UAAK,QAAL,GAAgB,QAAhB,CAFwG;;GAA1G;;eADW;;2BAMJ,SAAS;;;AACd,aAAO,2BAPE,uDAOW,QAAb,CAAsB,IAAtB,CAA2B,YAAM;AACtC,YAAM,WAAW,cAAI,KAAJ,CAAU,QAAQ,GAAR,CAAV,CAAuB,QAAvB,CADqB;AAEtC,YAAM,UAAU,yBAAe,sDAAf,CAAV,CAFgC;;mBAGH,QAAQ,KAAR,CAAc,QAAd,KAA2B,EAA3B,CAHG;;YAG9B,qBAH8B;YAGtB,6BAHsB;YAGV,aAHU;;AAItC,YAAM,SAAS,QAAQ,MAAR,CAJuB;AAKtC,YAAM,QAAQ,QAAQ,KAAR,CALwB;AAMtC,YAAM,OAAO,QAAQ,IAAR,CANyB;AAOtC,YAAM,KAAK,WAAO,MAAP,EAAe,OAAK,QAAL,CAApB,CAPgC;AAQtC,YAAI,gBAAJ,CARsC;;AAUtC,YAAI,WAAW,kBAAW,GAAX,EAAgB;AAC7B,cAAI,EAAJ,EAAQ;AACN,gBAAI,OAAO,QAAP,EAAiB;AACnB,wBAAU,GAAG,KAAH,CAAS,UAAT,EAAqB,KAArB,CAAV,CADmB;aAArB,MAEO,IAAI,OAAO,QAAP,EAAiB;AAC1B,wBAAU,GAAG,KAAH,CAAS,UAAT,EAAqB,IAArB,CAAV,CAD0B;aAArB,MAEA;AACL,wBAAU,GAAG,QAAH,CAAY,UAAZ,EAAwB,EAAxB,CAAV,CADK;aAFA;WAHT,MAQO;AACL,sBAAU,GAAG,IAAH,CAAQ,UAAR,EAAoB,KAApB,CAAV,CADK;WARP;SADF,MAYO,IAAI,WAAW,kBAAW,IAAX,IAAmB,WAAW,kBAAW,GAAX,EAAgB;AAClE,oBAAU,GAAG,IAAH,CAAQ,UAAR,EAAoB,IAApB,CAAV,CADkE;SAA7D,MAEA,IAAI,WAAW,kBAAW,MAAX,EAAmB;AACvC,cAAI,EAAJ,EAAQ;AACN,sBAAU,GAAG,UAAH,CAAc,UAAd,EAA0B,EAA1B,CAAV,CADM;WAAR,MAEO;AACL,sBAAU,GAAG,MAAH,CAAU,UAAV,EAAsB,KAAtB,CAAV,CADK;WAFP;SADK;;AAQP,eAAO,QAAQ,IAAR,CAAa,kBAAU;AAC5B,cAAI,aAAa,kBAAW,EAAX,CADW;;AAG5B,cAAI,WAAW,kBAAW,IAAX,EAAiB;AAC9B,yBAAa,kBAAW,OAAX,CADiB;WAAhC;;AAIA,kBAAQ,QAAR,GAAmB;AACjB,wBAAY,UAAZ;AACA,qBAAS,EAAT;AACA,kBAAM,MAAN;WAHF,CAP4B;;AAa5B,iBAAO,OAAP,CAb4B;SAAV,CAApB,CAhCsC;OAAN,CAAlC,CADc;;;;SANL","file":"rack/middleware/cache.js","sourcesContent":["import { KinveyMiddleware } from '../middleware';\nimport { DB, DBAdapter } from '../persistence/db';\nimport { HttpMethod, StatusCode } from '../../enums';\nimport UrlPattern from 'url-pattern';\nimport url from 'url';\n\n/**\n * @private\n */\nexport class CacheMiddleware extends KinveyMiddleware {\n  constructor(adapters = [DBAdapter.IndexedDB, DBAdapter.WebSQL, DBAdapter.LocalStorage, DBAdapter.Memory]) {\n    super('Kinvey Cache Middleware');\n    this.adapters = adapters;\n  }\n\n  handle(request) {\n    return super.handle(request).then(() => {\n      const pathname = url.parse(request.url).pathname;\n      const pattern = new UrlPattern('(/:namespace)(/)(:appKey)(/)(:collection)(/)(:id)(/)');\n      const { appKey, collection, id } = pattern.match(pathname) || {};\n      const method = request.method;\n      const query = request.query;\n      const data = request.data;\n      const db = new DB(appKey, this.adapters);\n      let promise;\n\n      if (method === HttpMethod.GET) {\n        if (id) {\n          if (id === '_count') {\n            promise = db.count(collection, query);\n          } else if (id === '_group') {\n            promise = db.group(collection, data);\n          } else {\n            promise = db.findById(collection, id);\n          }\n        } else {\n          promise = db.find(collection, query);\n        }\n      } else if (method === HttpMethod.POST || method === HttpMethod.PUT) {\n        promise = db.save(collection, data);\n      } else if (method === HttpMethod.DELETE) {\n        if (id) {\n          promise = db.removeById(collection, id);\n        } else {\n          promise = db.remove(collection, query);\n        }\n      }\n\n      return promise.then(result => {\n        let statusCode = StatusCode.Ok;\n\n        if (method === HttpMethod.POST) {\n          statusCode = StatusCode.Created;\n        }\n\n        request.response = {\n          statusCode: statusCode,\n          headers: {},\n          data: result\n        };\n\n        return request;\n      });\n    });\n  }\n}\n"],"sourceRoot":"/source/"}