{"version":3,"sources":["rack/persistence/adapters/localstorage.js"],"names":[],"mappings":"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","file":"rack/persistence/adapters/localstorage.js","sourcesContent":["import Promise from 'babybird';\nimport { NotFoundError } from '../../../errors';\nimport keyBy from 'lodash/keyBy';\nimport merge from 'lodash/merge';\nimport values from 'lodash/values';\nimport forEach from 'lodash/forEach';\nconst idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';\nconst localStorage = global.localStorage;\n\n/**\n * @private\n */\nexport class LocalStorage {\n  constructor(name = 'kinvey') {\n    this.name = name;\n  }\n\n  find(collection) {\n    return Promise.resolve().then(() => {\n      const data = localStorage.getItem(`${this.name}${collection}`);\n\n      try {\n        return JSON.parse(data);\n      } catch (err) {\n        return data;\n      }\n    }).then(entities => {\n      if (!entities) {\n        return [];\n      }\n\n      return entities;\n    });\n  }\n\n  findById(collection, id) {\n    return this.find(collection).then(entities => {\n      const entity = find(entities, entity => entity[idAttribute] === id);\n\n      if (!entity) {\n        throw new NotFoundError(`An entity with _id = ${id} was not found in the ${collection} ` +\n          `collection on the ${this.name} memory database.`);\n      }\n\n      return entity;\n    });\n  }\n\n  save(collection, entities) {\n    return this.find(collection).then(existingEntities => {\n      const existingEntitiesById = keyBy(existingEntities, idAttribute);\n      const entitiesById = keyBy(entities, idAttribute);\n      const existingEntityIds = Object.keys(existingEntitiesById);\n\n      forEach(existingEntityIds, id => {\n        const existingEntity = existingEntitiesById[id];\n        const entity = entitiesById[id];\n\n        if (entity) {\n          entitiesById[id] = merge(existingEntity, entity);\n        }\n      });\n\n      localStorage.setItem(`${this.name}${collection}`, JSON.stringify(values(entitiesById)));\n      return entities;\n    });\n  }\n\n  removeById(collection, id) {\n    return this.find(collection).then(entities => {\n      const entitiesById = keyBy(entities, idAttribute);\n      const entity = entitiesById[id];\n\n      if (!entity) {\n        throw new NotFoundError(`An entity with _id = ${id} was not found in the ${collection} ` +\n          `collection on the ${this.name} memory database.`);\n      }\n\n      delete entitiesById[id];\n      localStorage.setItem(`${this.name}${collection}`, JSON.stringify(values(entitiesById)));\n\n      return {\n        count: 1,\n        entities: [entity]\n      };\n    });\n  }\n\n  static isSupported() {\n    if (localStorage) {\n      const item = 'testLocalStorageSupport';\n      try {\n        localStorage.setItem(item, item);\n        localStorage.removeItem(item);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n}\n"],"sourceRoot":"/source/"}