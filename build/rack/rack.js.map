{"version":3,"sources":["rack/rack.js"],"names":[],"mappings":"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","file":"rack/rack.js","sourcesContent":["import Promise from 'babybird';\nimport { Middleware, KinveyMiddleware } from './middleware';\nimport { CacheMiddleware } from './middleware/cache';\nimport { ParseMiddleware } from './middleware/parse';\nimport { SerializeMiddleware } from './middleware/serialize';\nimport findIndex from 'lodash/findIndex';\nimport reduce from 'lodash/reduce';\nlet sharedCacheRackInstance;\nlet sharedNetworkRackInstance;\n\n/**\n * @private\n */\nexport class Rack extends KinveyMiddleware {\n  constructor(name = 'Rack') {\n    super(name);\n    this.middlewares = [];\n    this.canceled = false;\n  }\n\n  getMiddleware(index = -1) {\n    const middlewares = this.middlewares;\n\n    if (index < -1 || index >= middlewares.length) {\n      throw new Error(`Index ${index} is out of bounds.`);\n    }\n\n    return middlewares[index];\n  }\n\n  use(middleware) {\n    if (middleware) {\n      if (middleware instanceof KinveyMiddleware) {\n        this.middlewares.push(middleware);\n        return;\n      }\n\n      throw new Error('Unable to use the middleware. It must be an instance of Middleware.');\n    }\n  }\n\n  useBefore(middlewareClass, middleware) {\n    if (middleware) {\n      if (middleware instanceof Middleware) {\n        const middlewares = this.middlewares;\n        const index = findIndex(middlewares, existingMiddleware => existingMiddleware instanceof middlewareClass);\n\n        if (index > -1) {\n          middlewares.splice(index, 0, middleware);\n          this.middlewares = middlewares;\n        }\n\n        return;\n      }\n\n      throw new Error('Unable to use the middleware. It must be an instance of Middleware.');\n    }\n  }\n\n  useAfter(middlewareClass, middleware) {\n    if (middleware) {\n      if (middleware instanceof Middleware) {\n        const middlewares = this.middlewares;\n        const index = findIndex(middlewares, existingMiddleware => existingMiddleware instanceof middlewareClass);\n\n        if (index > -1) {\n          middlewares.splice(index + 1, 0, middleware);\n          this.middlewares = middlewares;\n        }\n\n        return;\n      }\n\n      throw new Error('Unable to use the middleware. It must be an instance of Middleware.');\n    }\n  }\n\n  swap(middlewareClass, middleware) {\n    if (middleware) {\n      if (middleware instanceof Middleware) {\n        const middlewares = this.middlewares;\n        const index = findIndex(middlewares, existingMiddleware => existingMiddleware instanceof middlewareClass);\n\n        if (index > -1) {\n          middlewares.splice(index, 1, middleware);\n          this.middlewares = middlewares;\n        }\n\n        return;\n      }\n\n      throw new Error('Unable to use the middleware. It must be an instance of Middleware.');\n    }\n  }\n\n  remove(middlewareClass) {\n    const middlewares = this.middlewares;\n    const index = findIndex(middlewares, existingMiddleware => existingMiddleware instanceof middlewareClass);\n\n    if (index > -1) {\n      middlewares.splice(index, 1);\n      this.middlewares = middlewares;\n      this.remove(middlewareClass);\n    }\n  }\n\n  reset() {\n    this.middlewares = [];\n  }\n\n  execute(request) {\n    if (!request) {\n      return Promise.reject(new Error('Request is null. Please provide a valid request.'));\n    }\n\n    return reduce(this.middlewares,\n                  (promise, middleware) => promise.then(request => middleware.handle(request)),\n                  Promise.resolve(request));\n  }\n\n  cancel() {\n    this.canceled = true;\n  }\n\n  handle(request) {\n    return this.execute(request);\n  }\n\n  generateTree(level = 0) {\n    const root = super.generateTree(level);\n    const middlewares = this.middlewares;\n\n    middlewares.forEach((middleware) => {\n      root.nodes.push(middleware.generateTree(level + 1));\n    });\n\n    return root;\n  }\n}\n\n/**\n * @private\n */\nexport class KinveyRack extends Rack {\n  execute(request) {\n    const promise = super.execute(request).then(request => request.response);\n    return promise;\n  }\n}\n\n/**\n * @private\n */\nexport class CacheRack extends KinveyRack {\n  constructor(name = 'Kinvey Cache Rack') {\n    super(name);\n    this.use(new CacheMiddleware());\n  }\n\n  static sharedInstance() {\n    let instance = sharedCacheRackInstance;\n\n    if (!instance) {\n      instance = new CacheRack();\n      sharedCacheRackInstance = instance;\n    }\n\n    return instance;\n  }\n}\n\n/**\n * @private\n */\nexport class NetworkRack extends KinveyRack {\n  constructor(name = 'Kinvey Network Rack') {\n    super(name);\n    this.use(new SerializeMiddleware());\n    this.use(new ParseMiddleware());\n  }\n\n  static sharedInstance() {\n    let instance = sharedNetworkRackInstance;\n\n    if (!instance) {\n      instance = new NetworkRack();\n      sharedNetworkRackInstance = instance;\n    }\n\n    return instance;\n  }\n}\n"],"sourceRoot":"/source/"}