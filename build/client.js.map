{"version":3,"sources":["client.js"],"names":[],"mappings":"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","file":"client.js","sourcesContent":["import { KinveyError } from './errors';\nimport localStorage from 'local-storage';\nimport url from 'url';\nimport assign from 'lodash/assign';\nimport isString from 'lodash/isString';\nconst activeUserCollectionName = process.env.KINVEY_ACTIVE_USER_COLLECTION_NAME || 'kinvey_activeUser';\nconst activeSocialIdentityTokenCollectionName = process.env.KINVEY_ACTIVE_SOCIAL_IDENTITY_TOKEN_COLLECTION_NAME\n                                                || 'kinvey_activeSocialIdentityToken';\nlet sharedInstance;\n\n/**\n * The Client class stores information regarding your application. You can create mutiple clients\n * to send requests to different environments on the Kinvey platform.\n *\n * @example\n * var client = new Kinvey.Client({\n *   appKey: '<appKey>',\n *   appSecret: '<appSecret>'\n * });\n */\nexport class Client {\n  /**\n   * Creates a new instance of the Client class. An `options.appKey` must be provided along with\n   * either and `options.appSecret` or `options.masterSecret`.\n   *\n   * @param {Object}    options                             Options\n   * @param {string}    [options.protocol='https']          Protocl used for requests\n   * @param {string}    [options.host='baas.kinvey.com']    Host used for requests\n   * @param {string}    options.appKey                      App Key\n   * @param {string}    [options.appSecret]                 App Secret\n   * @param {string}    [options.masterSecret]              App Master Secret\n   * @param {string}    [options.encryptionKey]             App Encryption Key\n   *\n   * @throws {KinveyError}  If an `options.appKey` is not provided.\n   * @throws {KinveyError}  If neither an `options.appSecret` or `options.masterSecret` is provided.\n   */\n  constructor(options = {}) {\n    options = assign({\n      protocol: process.env.KINVEY_API_PROTOCOL || 'https:',\n      host: process.env.KINVEY_API_HOST || 'baas.kinvey.com'\n    }, options);\n\n    if (!options.appKey && !options.appId) {\n      throw new KinveyError('No App Key was provided. ' +\n        'Unable to create a new Client without an App Key.');\n    }\n\n    if (!options.appSecret && !options.masterSecret) {\n      throw new KinveyError('No App Secret or Master Secret was provided. ' +\n        'Unable to create a new Client without an App Key.');\n    }\n\n    if (options.hostname && isString(options.hostname)) {\n      const hostnameParsed = url.parse(options.hostname);\n      options.protocol = hostnameParsed.protocol;\n      options.host = hostnameParsed.host;\n    }\n\n    /**\n     * @type {string}\n     */\n    this.protocol = options.protocol;\n\n    /**\n     * @type {string}\n     */\n    this.host = options.host;\n\n    /**\n     * @type {string}\n     */\n    this.appKey = options.appKey || options.appId;\n\n    /**\n     * @type {string|undefined}\n     */\n    this.appSecret = options.appSecret;\n\n    /**\n     * @type {string|undefined}\n     */\n    this.masterSecret = options.masterSecret;\n\n    /**\n     * @type {string|undefined}\n     */\n    this.encryptionKey = options.encryptionKey;\n  }\n\n  get baseUrl() {\n    return url.format({\n      protocol: this.protocol,\n      host: this.host\n    });\n  }\n\n  getActiveUserData() {\n    return localStorage.get(`${this.appKey}${activeUserCollectionName}`);\n  }\n\n  setActiveUserData(data) {\n    if (data) {\n      try {\n        return localStorage.set(`${this.appKey}${activeUserCollectionName}`, data);\n      } catch (error) {\n        return false;\n      }\n    }\n\n    return localStorage.remove(`${this.appKey}${activeUserCollectionName}`);\n  }\n\n  getActiveSocialIdentity() {\n    return localStorage.get(`${this.appKey}${activeSocialIdentityTokenCollectionName}`);\n  }\n\n  setActiveSocialIdentity(socialIdentity) {\n    if (socialIdentity) {\n      try {\n        return localStorage.set(`${this.appKey}${activeSocialIdentityTokenCollectionName}`, socialIdentity);\n      } catch (error) {\n        return false;\n      }\n    }\n\n    return localStorage.remove(`${this.appKey}${activeSocialIdentityTokenCollectionName}`);\n  }\n\n  /**\n   * Returns an object containing all the information for this Client.\n   *\n   * @return {Object} JSON\n   */\n  toJSON() {\n    const json = {\n      protocol: this.protocol,\n      host: this.host,\n      appKey: this.appKey,\n      appSecret: this.appSecret,\n      masterSecret: this.masterSecret,\n      encryptionKey: this.encryptionKey\n    };\n\n    return json;\n  }\n\n  /**\n   * Initializes the library by creating a new instance of the\n   * Client class and storing it as a shared instance.\n   *\n   * @param {Object}    options                             Options\n   * @param {string}    [options.protocol='https']          Protocl used for requests\n   * @param {string}    [options.host='baas.kinvey.com']    Host used for requests\n   * @param {string}    options.appKey                      App Key\n   * @param {string}    [options.appSecret]                 App Secret\n   * @param {string}    [options.masterSecret]              App Master Secret\n   * @param {string}    [options.encryptionKey]             App Encryption Key\n   *\n   * @throws {KinveyError}  If an `options.appKey` is not provided.\n   * @throws {KinveyError}  If neither an `options.appSecret` or `options.masterSecret` is provided.\n   *\n   * @return {Client}  An instance of Client.\n   *\n   * @example\n   * var client = Kinvey.Client.init({\n   *   appKey: '<appKey>',\n   *   appSecret: '<appSecret>'\n   * });\n   */\n  static init(options) {\n    const client = new Client(options);\n    sharedInstance = client;\n    return client;\n  }\n\n  /**\n   * Returns the shared client instance used by the library.\n   *\n   * @throws {KinveyError} If `Kinvey.init()` has not been called.\n   *\n   * @return {Client} The shared instance.\n   */\n  static sharedInstance() {\n    const client = sharedInstance;\n\n    if (!client) {\n      throw new KinveyError('You have not initialized the library. ' +\n        'Please call Kinvey.init() to initialize the library.');\n    }\n\n    return client;\n  }\n}\n"],"sourceRoot":"/source/"}