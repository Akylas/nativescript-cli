{"version":3,"sources":["user.js"],"names":[],"mappings":"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","file":"user.js","sourcesContent":["import Promise from 'babybird';\nimport { Client } from './client';\nimport { Query } from './query';\nimport { Acl } from './acl';\nimport { Metadata } from './metadata';\nimport { KinveyError, NotFoundError, ActiveUserError } from './errors';\nimport { MobileIdentityConnect } from './mic';\nimport { AuthType, SocialIdentity, HttpMethod } from './enums';\nimport { DataStore, DataStoreType } from './stores/datastore';\nimport { NetworkRequest } from './requests/network';\nimport url from 'url';\nimport assign from 'lodash/assign';\nimport result from 'lodash/result';\nimport isObject from 'lodash/isObject';\nconst appdataNamespace = process.env.KINVEY_DATASTORE_NAMESPACE || 'appdata';\nconst usersNamespace = process.env.KINVEY_USERS_NAMESPACE || 'user';\nconst rpcNamespace = process.env.KINVEY_RPC_NAMESPACE || 'rpc';\nconst idAttribute = process.env.KINVEY_ID_ATTRIBUTE || '_id';\nconst kmdAttribute = process.env.KINVEY_KMD_ATTRIBUTE || '_kmd';\nconst socialIdentityAttribute = process.env.KINVEY_SOCIAL_IDENTITY_ATTRIBUTE || '_socialIdentity';\nconst usernameAttribute = process.env.KINVEY_USERNAME_ATTRIBUTE || 'username';\nconst emailAttribute = process.env.KINVEY_EMAIL_ATTRIBUTE || 'email';\nconst supportedIdentities = ['facebook', 'google', 'linkedIn'];\nlet hello;\n\nif (typeof window !== 'undefined') {\n  hello = require('hellojs');\n}\n\n/**\n * The User class is used to represent a single user on the Kinvey platform.\n * Use the user class to manage the active user lifecycle and perform user operations.\n */\nexport class User {\n  /**\n   * Create a new instance of a User.\n   *\n   * @param  {Object}   [data={}]    Data for the user.\n   * @return {User}                  User\n   *\n   * @example\n   * var user = new User();\n   */\n  constructor(data = {}) {\n    /**\n     * The users data.\n     *\n     * @type {Object}\n     */\n    this.data = data;\n\n    /**\n     * @private\n     * The client used by this user.\n     *\n     * @type {Client}\n     */\n    this.client = Client.sharedInstance();\n  }\n\n  /**\n   * The _id for the user.\n   *\n   * @return {?string} _id\n   *\n   * @example\n   * var _id = user._id;\n   */\n  get _id() {\n    return this.data[idAttribute];\n  }\n\n  /**\n   * The _acl for the user.\n   *\n   * @return {Acl} _acl\n   *\n   * @example\n   * var _acl = user._acl;\n   */\n  get _acl() {\n    return new Acl(this.data);\n  }\n\n  /**\n   * The metadata for the user.\n   *\n   * @return {Metadata} metadata\n   *\n   * @example\n   * var metadata = user.metadata;\n   */\n  get metadata() {\n    return new Metadata(this.data);\n  }\n\n  set metadata(metadata) {\n    this.data[kmdAttribute] = result(metadata, 'toJSON', metadata);\n  }\n\n  /**\n   * The _kmd for the user.\n   *\n   * @return {Metadata} _kmd\n   *\n   * @example\n   * var _kmd = user._kmd;\n   */\n  get _kmd() {\n    return this.metadata;\n  }\n\n  set _kmd(kmd) {\n    this.metadata = kmd;\n  }\n\n  get _socialIdentity() {\n    return this.data[socialIdentityAttribute];\n  }\n\n  /**\n   * The auth token for the user.\n   *\n   * @return {?string} Auth token\n   *\n   * @example\n   * var authtoken = user.authtoken;\n   */\n  get authtoken() {\n    return this.metadata.authtoken;\n  }\n\n  /**\n   * Set the auth token for the user.\n   *\n   * @param  {?string} authtoken Auth token\n   *\n   * @example\n   * user.authtoken = 'authtoken';\n   */\n  set authtoken(authtoken) {\n    const metadata = this.metadata;\n    metadata.authtoken = authtoken;\n    this.metadata = metadata;\n  }\n\n  /**\n   * The username for the user.\n   *\n   * @return {?string} Username\n   *\n   * @example\n   * var username = user.username;\n   */\n  get username() {\n    return this.data[usernameAttribute];\n  }\n\n  /**\n   * The email for the user.\n   *\n   * @return {?string} Email\n   *\n   * @example\n   * var email = user.email;\n   */\n  get email() {\n    return this.data[emailAttribute];\n  }\n\n  get _pathname() {\n    return `/${usersNamespace}/${this.client.appKey}`;\n  }\n\n  /**\n   * Gets the active user. You can optionally provide a client\n   * to use to lookup the active user.\n   *\n   * @param  {Client}           [client=Client.sharedInstance()]   Client to use to set the active user.\n   * @return {Promise<User>}                                       The active user on the client. The\n   *                                                               active user could be null if one does\n   *                                                               not exist.\n   *\n   * @example\n   * var _id = user._id;\n   */\n  static getActiveUser(client = Client.sharedInstance()) {\n    const data = client.getActiveUserData();\n    let user = null;\n\n    if (data) {\n      user = new User(data);\n      user.client = client;\n    }\n\n    return user;\n  }\n\n  /**\n   * Sets the active user. You can optionally provide a client to\n   * set the active user on. Only one active user per client is\n   * allowed.\n   *\n   * @param  {?(User|Object)}      [user]                               User to set as the active user.\n   * @param  {Client}              [client=Client.sharedInstance()]     The client to use to set the active user on.\n   * @return {Promise<User>}                                            The active user on the client. The active user\n   *                                                                    could be null if one does not exist.\n   *\n   * @example\n   * var user = new User();\n   * var promise = User.setActiveUser(user);\n   * promise.then(function(activeUser) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  static setActiveUser(user, client = Client.sharedInstance()) {\n    const data = result(user, 'toJSON', user);\n    client.setActiveUserData(data);\n    return User.getActiveUser(client);\n  }\n\n  /**\n   * Set this user as the active user.\n   *\n   * @return {Promise<User>}  The active user.\n   *\n   * @example\n   * var promise = user.setAsActiveUser();\n   * promise.then(function(activeUser) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  setAsActiveUser() {\n    return User.setActiveUser(this, this.client);\n  }\n\n  /**\n   * Checks if this user is the active user.\n   *\n   * @return {Promise<Boolean>} True or false if this user is the active user.\n   *\n   * @example\n   * var promise = user.isActiveUser();\n   * promise.then(function(isActiveUser) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  isActive() {\n    const activeUser = User.getActiveUser(this.client);\n\n    if (activeUser && activeUser._id === this._id) {\n      return true;\n    }\n\n    return false;\n  }\n\n  static login(usernameOrData, password, options) {\n    const user = new User();\n    return user.login(usernameOrData, password, options);\n  }\n\n  static loginWithIdentity(identity, tokens, options) {\n    const user = new User();\n    return user.loginWithIdentity(identity, tokens, options);\n  }\n\n  /**\n   * Login using a username or password.\n   *\n   * @param  {string|Object}      usernameOrData    Username or an object with username\n   *                                                and password properties.\n   * @param  {string}             [password]        Users password.\n   * @param  {Object}             [options={}]      Options\n   * @return {Promise<User>}                        The logged in user.\n   *\n   * @example\n   * var promise = user.login('username', 'password');\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  login(usernameOrData, password, options = {}) {\n    if (!isObject(usernameOrData)) {\n      usernameOrData = {\n        username: usernameOrData,\n        password: password\n      };\n    }\n\n    if (!usernameOrData._socialIdentity) {\n      if (usernameOrData.username) {\n        usernameOrData.username = String(usernameOrData.username).trim();\n      }\n\n      if (usernameOrData.password) {\n        usernameOrData.password = String(usernameOrData.password).trim();\n      }\n    }\n\n    const isActiveUser = this.isActive();\n    if (isActiveUser) {\n      return Promise.reject(new ActiveUserError('This user is already the active user.'));\n    }\n\n    const activeUser = User.getActiveUser(this.client);\n    if (activeUser) {\n      return Promise.reject(new ActiveUserError('An active user already exists. ' +\n        'Please logout the active user before you login.'));\n    }\n\n    if ((!usernameOrData.username || usernameOrData.username === ''\n      || !usernameOrData.password || usernameOrData.password === '')\n      && !usernameOrData[socialIdentityAttribute]) {\n      return Promise.reject(new KinveyError('Username and/or password missing. ' +\n        'Please provide both a username and password to login.'));\n    }\n\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      authType: AuthType.App,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `${this._pathname}/login`\n      }),\n      data: usernameOrData,\n      properties: options.properties,\n      timeout: options.timeout\n    });\n\n    const promise = request.execute().then(response => {\n      this.data = response.data;\n      return this.setAsActiveUser();\n    });\n\n    return promise;\n  }\n\n  loginWithIdentity(identity, token, options) {\n    const data = { _socialIdentity: {} };\n    data._socialIdentity[identity] = token;\n    return this.login(data, options);\n  }\n\n  static loginWithMIC(redirectUri, authorizationGrant, options) {\n    const user = new User();\n    return user.loginWithMIC(redirectUri, authorizationGrant, options);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Login using Mobile Identity Connect.\n   *\n   * @param  {string}                 redirectUri                                                         The redirect uri used\n   *                                                                                                      for MIC logins.\n   * @param  {AuthorizationGrant}     [authorizationGrant=AuthoizationGrant.AuthorizationCodeLoginPage]   MIC authorization grant to use.\n   * @param  {Object}                 [options={}]                                                        Options\n   * @return {Promise<User>}                                                                              The logged in user.\n   *\n   * @example\n   * var promise = user.loginWithMIC('http://example.com');\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  /* eslint-enable max-len */\n  loginWithMIC(redirectUri, authorizationGrant, options = {}) {\n    const mic = new MobileIdentityConnect(this.client);\n    return mic.login(redirectUri, authorizationGrant, options).then(token => {\n      options.redirectUri = redirectUri;\n      options.client = result(mic.client, 'toJSON', mic.client);\n      return this.connect(MobileIdentityConnect.identity, token, options);\n    });\n  }\n\n  /**\n   * Logout the user. If the user was the active user then the active user will be set to null.\n   *\n   * @param  {Object}         [options={}]    Options\n   * @return {Promise<User>}                  The logged out user.\n   *\n   * @example\n   * var promise = user.logout();\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  logout(options = {}) {\n    const isActive = this.isActive();\n\n    if (!isActive) {\n      return Promise.resolve();\n    }\n\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      authType: AuthType.Session,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `/${usersNamespace}/${this.client.appKey}/_logout`\n      }),\n      properties: options.properties,\n      timeout: options.timeout\n    });\n\n    const promise = request.execute().catch(() => null).then(() => {\n      const isActive = this.isActive();\n      if (isActive) {\n        return User.setActiveUser(null, this.client);\n      }\n\n      return null;\n    }).then(() => this);\n\n    return promise;\n  }\n\n  /**\n   * @private\n   * Returns true or false if identity connect is supported.\n   *\n   * @return {Boolean}  True or false if identity connect is supported.\n   *\n   * @example\n   * var isIdentitySupported = user.isIdentitySupported('identity');\n   */\n  static isIdentitySupported(identity) {\n    return hello && supportedIdentities.indexOf(identity) !== -1;\n  }\n\n  /**\n   * Connect using Facebook.\n   *\n   * @param  {Object}         [options={}]  Options\n   * @return {Promise<User>}                The connected user.\n   *\n   * @example\n   * var promise = user.connectWithFacebook();\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  static connectWithFacebook(options = {}) {\n    return User.connectWithIdentity(SocialIdentity.Facebook, options);\n  }\n\n  /**\n   * Connect using Google.\n   *\n   * @param  {Object}         [options={}]  Options\n   * @return {Promise<User>}                The connected user.\n   *\n   * @example\n   * var promise = user.connectWithGoogle();\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  static connectWithGoogle(options = {}) {\n    return User.connectWithIdentity(SocialIdentity.Google, options);\n  }\n\n  /**\n   * Connect using LinkedIn.\n   *\n   * @param  {Object}         [options={}]  Options\n   * @return {Promise<User>}                The connected user.\n   *\n   * @example\n   * var promise = user.connectWithLinkedIn();\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  static connectWithLinkedIn(options = {}) {\n    return User.connectWithIdentity(SocialIdentity.LinkedIn, options);\n  }\n\n  static connectWithIdentity(identity, options) {\n    const user = new User();\n    return user.connectWithIdentity(identity, options);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Connect using an identity (Facebook, Google, LinkedIn etc.).\n   *\n   * @param  {SocialIdentity|string}         identity                                Identity used to connect the user.\n   * @param  {Object}                        [options={}]                            Options\n   * @param  {string}                        [options.collectionName='Identities']   Collection name to use to lookup credentials\n   *                                                                                 for the identity.\n   * @return {Promise<User>}                                                         The connected user.\n   *\n   * @example\n   * var promise = user.connectWithIdentity(SocialIdentity.Facebook);\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  /* eslint-enable max-len */\n  connectWithIdentity(identity, options = {}) {\n    options = assign({\n      collectionName: 'identities'\n    }, options);\n\n\n    const promise = Promise.resolve().then(() => {\n      if (!identity) {\n        throw new KinveyError('An identity is required to connect the user.');\n      }\n\n      if (!User.isIdentitySupported(identity)) {\n        throw new KinveyError(`Identity ${identity} is not supported on this platform.`);\n      }\n\n      const query = new Query().equalTo('identity', identity);\n      const request = new NetworkRequest({\n        method: HttpMethod.GET,\n        authType: AuthType.None,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: `/${appdataNamespace}/${this.client.appKey}/${options.collectionName}`\n        }),\n        query: query,\n        properties: options.properties,\n        timeout: options.timeout\n      });\n      return request.execute();\n    }).then(response => {\n      if (response.data.length === 1) {\n        const helloSettings = {};\n        helloSettings[identity] = response.data[0].key || response.data[0].appId || response.data[0].clientId;\n        hello.init(helloSettings);\n        return hello(identity).login();\n      }\n\n      throw new KinveyError('Unsupported identity.');\n    }).then(() => {\n      const authResponse = hello(identity).getAuthResponse();\n      return this.connect(identity, authResponse, options);\n    });\n\n    return promise;\n  }\n\n  /**\n   * @private\n   *\n   * Connects with the provided accessToken and identity.\n   *\n   * @param  {SocialIdentity|string}         identity      Identity used to connect the user.\n   * @param  {string}                        accessToken   Access token for the identity.\n   * @param  {number}                        [expiresIn]   Time in seconds for how long the access token is valid.\n   * @param  {Object}                        [options={}]  Options\n   * @return {Promise<User>}                               The connected user.\n   *\n   * @example\n   * var token = {\n   *   access_token: 'access_token',\n   *   refresh_token: 'refresh_token',\n   *   expires_in: 3600\n   * };\n   * var promise = user.connect(SocialIdentity.Facebook, token);\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  connect(identity, token, options = {}) {\n    const data = this.data;\n    const socialIdentity = data[socialIdentityAttribute] || {};\n    socialIdentity[identity] = token;\n    data[socialIdentityAttribute] = socialIdentity;\n    this.data = data;\n\n    const promise = Promise.resolve().then(() => {\n      const isActive = this.isActive();\n\n      if (isActive) {\n        options._identity = identity;\n        return this.update(data, options);\n      }\n\n      return this.login(data, null, options);\n    }).catch(err => {\n      if (err instanceof NotFoundError) {\n        return this.signup(data, options).then(() => this.connect(identity, token, options));\n      }\n\n      throw err;\n    }).then(() => {\n      this.client.setActiveSocialIdentity({\n        identity: identity,\n        token: this._socialIdentity[identity],\n        redirectUri: options.redirectUri,\n        client: options.client\n      });\n      return this;\n    });\n\n    return promise;\n  }\n\n  disconnect(identity, options = {}) {\n    const data = this.data;\n    const socialIdentity = data[socialIdentityAttribute] || {};\n    delete socialIdentity[identity];\n    data[socialIdentityAttribute] = socialIdentity;\n    this.data = data;\n\n    const promise = Promise.resolve().then(() => {\n      if (!this._id) {\n        return this;\n      }\n\n      return this.update(data, options);\n    }).then(() => {\n      const activeSocialIdentity = this.client.getActiveSocialIdentity();\n\n      if (activeSocialIdentity.identity === identity) {\n        this.client.setActiveSocialIdentity(null);\n      }\n\n      return this;\n    });\n\n    return promise;\n  }\n\n  static signup(data, options) {\n    const user = new User();\n    return user.signup(data, options);\n  }\n\n  static signupWithIdentity(identity, tokens, options) {\n    const user = new User();\n    return user.signupWithIdentity(identity, tokens, options);\n  }\n\n  /**\n   * Sign up. If options.state is set to true then the user\n   * will be set as the active user after succesfully signing up the\n   * user.\n   *\n   * @param  {User|Object}    data                    Users data.\n   * @param  {Object}         [options={}]            Options\n   * @param  {Boolean}        [options.state=true]    If set to true, the user will be\n   *                                                  set as the active user after successfully\n   *                                                  being signed up.\n   * @return {Promise<User>}                          The signed up user.\n   *\n   * @example\n   * var promise = user.signup({\n   *   username: 'admin',\n   *   password: 'admin'\n   * });\n   * promise.then(function(user) {\n   *   ...\n   * }).catch(function(error) {\n   *   ...\n   * });\n   */\n  signup(data, options = {}) {\n    options = assign({\n      state: true\n    }, options);\n\n    const promise = Promise.resolve().then(() => {\n      if (options.state === true) {\n        const activeUser = User.getActiveUser(this.client);\n        if (activeUser) {\n          throw new ActiveUserError('An active user already exists. ' +\n            'Please logout the active user before you login.');\n        }\n      }\n    }).then(() => {\n      const request = new NetworkRequest({\n        method: HttpMethod.POST,\n        authType: AuthType.App,\n        url: url.format({\n          protocol: this.client.protocol,\n          host: this.client.host,\n          pathname: `/${usersNamespace}/${this.client.appKey}`\n        }),\n        data: result(data, 'toJSON', data),\n        properties: options.properties,\n        timeout: options.timeout\n      });\n      return request.execute();\n    }).then(response => {\n      this.data = response.data;\n\n      if (options.state === true) {\n        return this.setAsActiveUser();\n      }\n\n      return this;\n    });\n\n    return promise;\n  }\n\n  signupWithIdentity(identity, tokens, options) {\n    const data = { _socialIdentity: {} };\n    data._socialIdentity[identity] = tokens;\n    return this.signup(data, options);\n  }\n\n  update(data, options) {\n    const userStore = DataStore.getInstance(null, DataStoreType.User);\n    return userStore.save(data, options).then(data => {\n      this.data = data;\n\n      if (this.isActive()) {\n        return this.setAsActiveUser();\n      }\n\n      return this;\n    });\n  }\n\n  me(options = {}) {\n    const request = new NetworkRequest({\n      method: HttpMethod.GET,\n      authType: AuthType.Session,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `/${usersNamespace}/${this.client.appKey}/_me`\n      }),\n      properties: options.properties,\n      timeout: options.timeout\n    });\n\n    const promise = request.execute().then(response => {\n      this.data = response.data;\n\n      if (!this.authtoken) {\n        const activeUser = User.getActiveUser(this.client);\n\n        if (activeUser) {\n          this.authtoken = activeUser.authtoken;\n        }\n      }\n\n      return this.setAsActiveUser();\n    });\n\n    return promise;\n  }\n\n  verifyEmail(options = {}) {\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      authType: AuthType.App,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `/${rpcNamespace}/${this.client.appKey}/${this.username}/user-email-verification-initiate`\n      }),\n      properties: options.properties,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n    return promise;\n  }\n\n  forgotUsername(options = {}) {\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      authType: AuthType.App,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `/${rpcNamespace}/${this.client.appKey}/user-forgot-username`\n      }),\n      properties: options.properties,\n      data: { email: this.email },\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n    return promise;\n  }\n\n  resetPassword(options = {}) {\n    const request = new NetworkRequest({\n      method: HttpMethod.POST,\n      authType: AuthType.App,\n      url: url.format({\n        protocol: this.client.protocol,\n        host: this.client.host,\n        pathname: `/${rpcNamespace}/${this.client.appKey}/${this.username}/user-password-reset-initiate`\n      }),\n      properties: options.properties,\n      timeout: options.timeout,\n      client: this.client\n    });\n\n    const promise = request.execute().then(response => response.data);\n    return promise;\n  }\n\n  // refreshAuthToken(options = {}) {\n  //   const socialIdentity = this.data[socialIdentityAttribute];\n  //   const identity = socialIdentity.activeIdentity;\n  //   const token = socialIdentity[identity];\n  //   let promise;\n\n  //   switch (identity) {\n  //     case MobileIdentityConnect.identity:\n  //       const mic = new MobileIdentityConnect(this.client);\n  //       promise = mic.refresh(token, options);\n  //       break;\n  //     default:\n  //       promise = Promise.reject(new KinveyError(`Unable to refresh the auth token because ` +\n  //         `the ${identity} identity is not supported.`));\n  //   }\n\n  //   return promise.then(token => {\n  //     return this.connect(identity, token, options);\n  //   });\n  // }\n\n  toJSON() {\n    return this.data;\n  }\n}\n"],"sourceRoot":"/source/"}